============================= test session starts =============================
platform win32 -- Python 3.7.4, pytest-5.2.0, py-1.8.0, pluggy-0.13.0
hypothesis profile 'default-with-debug-verbosity' -> verbosity=Verbosity.debug, database=DirectoryBasedExampleDatabase('D:\\shared\\visabo\\.hypothesis\\examples')
rootdir: D:\shared\visabo
plugins: hypothesis-4.37.0
Loaded CANoe version 12.0.101...
Opening:  D:\shared\visabo\CANoe\stcvector00001\stcvector00001.cfg
collected 1 item

test_SD.py Reusing examples from database
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
1 bytes [1] -> Status.OVERRUN, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
state.teardown()
14 bytes [[1, [225, [[1, 3], 2]], [150, [3, [3, 3, 1]]], [150, [3, 1]], 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v2)
v3 = state.t_add_service(s=3)
state.teardown()
18 bytes [[1, [210, [3, 0]], [37, [1, 0]], [145, [3, 0]], [121, [0, 0]], [123, [3, [3, 2]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.t_startoffer(s=v1)
state.t_startoffer(s=v2)
v3 = state.t_add_service(s=3)
state.teardown()
31 bytes [[1, [116, [3, 0]], [203, [1, 0]], [165, [0, 0]], [101, [0, 0]], [170, [3, [3, 1]]], [46, [0, 0]], [199, [1, 1]], [238, [1, 0]], [206, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
34 bytes [[1, [117, [[1, 0, 2, 0, 3], [3, 1]]], [146, [2, 0]], [53, [0, 0]], [52, [1, 0]], [206, [1, 0]], [48, [0, 0]], [74, [1, 0]], [132, [1, 0]], [130, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
35 bytes [[1, [139, [[0, 1, 0, 1, 0, 3], 2]], [172, [1, 0]], [165, [0, 0]], [232, [2, 0]], [194, [0, 0]], [220, [0, 0]], [249, [2, 0]], [105, [0, 0]], [173, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
34 bytes [[1, [248, [[1, 1, 1, 2, 0, 3], 0]], [185, [2, 0]], [233, [2, 0]], [233, [2, 0]], [196, [1, 0]], [122, [0, 0]], [220, [2, 0]], [76, [1, 0]], [158, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
3 bytes [[1, [255, 30]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [137, [[1, 0, 3], [3, 3, 3, 1]]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
19 bytes [[1, [30, [[2, 0, 2, 0, 3], [3, 2]]], [185, [0, 0]], [129, [2, 0]], [241, [1, 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v2)
v3 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.teardown()
30 bytes [[1, [183, [3, 0]], [30, [0, 0]], [191, [0, 0]], [140, [0, 0]], [188, [0, 0]], [190, [3, [3, 2]]], [254, [0, 0]], [111, [3, 1]], [80, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v2)
v4 = state.t_add_service(s=v3)
state.t_startoffer(s=v2)
v5 = state.t_add_service(s=v1)
state.teardown()
39 bytes [[1, [226, [[2, 1, 1, 1, 0, 3], [3, 3, 3, 3, 0]]], [[255, 177], [3, 0]], [214, [2, 1]], [79, [3, 2]], [201, [1, 2]], [178, [0, 1]], [151, [3, 2]], [97, [1, 2]], [108, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [135, [[2, 1, 3], [3, 3, 0]]], [255, 255, 116]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
7 bytes [[1, [192, [3, [3, 2]]], [255, 25]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [236, [3, 1]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 5]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=1)
state.t_stopoffer(s=v2)
state.teardown()
33 bytes [[1, [178, [3, [3, 3, 3, 3, 2]]], [231, [2, 0]], [57, [3, 2]], [130, [2, 1]], [41, [0, 1]], [166, [2, 0]], [162, [3, 2]], [87, [3, 0]], [1, [2, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
v3 = state.t_add_service(s=3)
state.teardown()
25 bytes [[1, [117, [[0, 1, 2, 0, 3], 0]], [60, [0, 0]], [81, [1, 0]], [237, [3, 0]], [212, [1, 1]], [189, [3, [3, 2]]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
34 bytes [[1, [219, [[2, 2, 1, 0, 3], [3, 0]]], [188, [0, 0]], [87, [2, 0]], [38, [0, 0]], [236, [1, 0]], [219, [0, 0]], [180, [2, 0]], [118, [0, 0]], [116, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [59, [[1, 0, 0, 0, 3], [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [207, [[0, 0, 2, 0, 3], 0]], [28, [0, 0]], [85, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v3)
state.teardown()
15 bytes [[1, [123, [3, [3, 1]]], [1, [3, 0]], [28, [3, 0]], [85, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [249, [[1, 1, 1, 2, 0, 3], 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
14 bytes [[1, [201, [[0, 1, 0, 1, 0, 3], [3, 0]]], [1, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.teardown()
35 bytes [[1, [103, [[2, 2, 2, 3, 3, 2, 0, 3], [3, 3, 0]]], [35, [2, 0]], [208, [0, 0]], [182, [0, 0]], [241, [0, 0]], [147, [0, 0]], [58, [3, 2]], [81, [2, 1]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [24, [[0, 0, 0, 1, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [172, [[0, 1, 0, 0, 3], [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v2)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
30 bytes [[1, [245, [[0, 0, 0, 3, 3, 0, 3], [3, 0]]], [237, [3, 2]], [38, [2, 1]], [200, [1, 0]], [173, [2, 1]], [140, [0, 1]], [74, [1, 1]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [96, [[2, 0, 2, 1, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v3)
state.t_startoffer(s=v1)
state.teardown()
35 bytes [[1, [192, [[1, 0, 1, 1, 0, 3], [3, 0]]], [107, [2, 0]], [42, [3, 2]], [138, [3, 0]], [48, [3, 1]], [199, [1, 2]], [78, [0, 3]], [77, [0, 1]], [116, [1, 3]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [52, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
8 bytes [[1, [128, [3, [3, 3, 3, 0]]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v2)
state.t_startoffer(s=v2)
state.teardown()
32 bytes [[1, [91, [[1, 3], [3, 3, 0]]], [221, [1, 0]], [84, [0, 0]], [133, [3, 1]], [82, [2, 1]], [74, [2, 1]], [154, [3, 0]], [250, [3, 1]], [73, [1, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=2)
state.check_agree(s=v3)
v4 = state.t_add_service(s=v1)
v5 = state.t_add_service(s=v1)
state.teardown()
37 bytes [[1, [247, [[1, 1, 0, 1, 0, 3], [3, 2]]], [147, [1, 0]], [58, [1, 0]], [32, [1, 0]], [202, [3, 2]], [83, [3, 1]], [217, [0, [3, 0]]], [139, [3, 2]], [88, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [60, [[0, 2, 1, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
21 bytes [[1, [213, [[0, 0, 0, 0, 3], 0]], [43, [0, 0]], [100, [0, 0]], [108, [1, 0]], [172, [1, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.teardown()
21 bytes [[1, [230, [[0, 0, 0, 0, 3], 2]], [43, [0, 0]], [171, [3, 0]], [121, [0, 0]], [172, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [182, [[1, 0, 0, 1, 0, 3], [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v2)
v4 = state.t_add_service(s=v2)
state.t_startoffer(s=v3)
state.t_startoffer(s=v2)
state.teardown()
31 bytes [[1, [25, [3, 1]], [151, [2, 0]], [132, [1, 0]], [29, [3, 0]], [229, [3, [3, 3, 1]]], [74, [1, 1]], [28, [3, 0]], [118, [1, 1]], [53, [1, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.teardown()
15 bytes [[1, [212, [3, [3, 2]]], [1, [2, 0]], [223, [3, 0]], [146, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [217, [[1, 0, 3], 1]], 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
18 bytes [[1, [116, [[0, 0, 0, 0, 3], 0]], [47, [0, 0]], [43, [0, 0]], [249, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=2)
state.t_stopoffer(s=v2)
state.check_agree(s=v2)
v4 = state.t_add_service(s=v3)
state.teardown()
28 bytes [[1, [246, [[0, 0, 0, 1, 0, 3], 2]], [214, [2, 0]], [77, [3, 2]], [180, [3, 1]], [196, [2, 1]], [173, [0, 1]], [234, [3, 1]], 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [122, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=2)
v4 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
v5 = state.t_add_service(s=v3)
state.teardown()
34 bytes [[1, [63, [[0, 0, 0, 0, 3], 2]], [73, [0, 0]], [139, [1, 0]], [194, [3, 2]], [114, [2, 0]], [220, [3, [3, 1]]], [228, [3, 2]], [240, [1, 3]], [169, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=2)
v5 = state.t_add_service(s=v4)
state.t_startoffer(s=v1)
state.t_startoffer(s=v4)
state.teardown()
34 bytes [[1, [209, [[0, 1, 0, 0, 3], 2]], [73, [0, 0]], [138, [1, 0]], [226, [3, 0]], [114, [3, 2]], [220, [3, [3, 1]]], [228, [3, 1]], [240, [1, 4]], [137, [1, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
state.teardown()
13 bytes [[1, [221, [[0, 3], 0]], [165, [2, 0]], [215, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
v4 = state.t_add_service(s=2)
state.teardown()
21 bytes [[1, [170, [[0, 1, 0, 0, 3], 2]], [89, [2, 0]], [138, [3, 0]], [230, [3, 0]], [114, [3, 1]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
7 bytes [[1, [153, [[0, 0, 3], 2]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
15 bytes [[1, [139, [[1, 1, 2, 0, 3], 0]], [79, [0, 0]], [223, [1, 0]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
18 bytes [[1, [53, [[2, 0, 2, 1, 0, 3], [3, 0]]], [146, [0, 0]], [[255, 117], [1, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.teardown()
13 bytes [[1, [38, [[0, 2, 3], 1]], [131, [3, [3, 2]]], [255, 255, 83]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [37, [3, 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [114, [3, 1]], [255, 255, 131]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
16 bytes [[1, [179, [3, [3, 3, 3, 3, 3, 2]]], [34, [0, 0]], [211, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v3)
state.t_startoffer(s=v3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v3)
state.check_agree(s=v3)
state.t_stopoffer(s=v2)
state.teardown()
33 bytes [[1, [30, [3, [3, 3, 2]]], [161, [3, 0]], [88, [3, 0]], [80, [0, [3, 0]]], [146, [1, 0]], [46, [2, 2]], [60, [1, 0]], [78, [0, [3, 0]]], [70, [2, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=2)
v4 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
18 bytes [[1, [163, [[1, 3], 2]], [81, [3, 2]], [197, [3, 1]], [53, [3, 0]], [242, [2, 3]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.teardown()
11 bytes [[1, [179, [[1, 3], [3, 3, 2]]], [120, [1, 0]], 13]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [238, [[0, 1, 0, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [157, [[2, 2, 0, 0, 3], 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
10 bytes [[1, [154, [[0, 2, 3], 0]], [131, [2, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [115, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
9 bytes [[1, [30, [[0, 3], 0]], [165, [2, 0]], 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v2)
v3 = state.t_add_service(s=v2)
state.teardown()
29 bytes [[1, [37, [[2, 2, 3], [3, 2]]], [120, [1, 0]], [219, [2, 0]], [133, [2, 0]], [183, [3, 0]], [73, [2, 0]], [130, [1, 0]], [170, [3, 0]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [49, [[0, 0, 3], 0]], 11]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.teardown()
12 bytes [[1, [165, [[1, 1, 1, 0, 3], 1]], [116, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
12 bytes [[1, [104, [[1, 0, 1, 0, 3], 0]], [36, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
11 bytes [[1, [209, [3, 0]], [174, [1, 0]], [100, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=2)
state.teardown()
22 bytes [[1, [113, [[0, 0, 0, 2, 0, 3], 0]], [240, [1, 0]], [200, [1, 0]], [129, [1, 0]], [201, [3, 1]], 5]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
10 bytes [[1, [172, [[1, 2, 3], 0]], [131, [2, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [242, [3, 0]], [255, 2]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v2)
state.teardown()
31 bytes [[1, [27, [[0, 3], [3, 0]]], [110, [1, 0]], [97, [1, 0]], [250, [3, 0]], [37, [2, 1]], [214, [1, 0]], [144, [0, 0]], [130, [0, 1]], [63, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
11 bytes [[1, [44, [3, 0]], [174, [1, 0]], [100, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [67, [3, [3, 0]]], 5]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [85, [[2, 0, 2, 0, 3], 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
31 bytes [[1, [183, [[1, 0, 0, 1, 0, 3], 2]], [192, [2, 0]], [132, [2, 0]], [233, [1, 0]], [222, [1, 0]], [151, [2, 0]], [215, [1, 0]], [128, [0, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.t_startoffer(s=v2)
v3 = state.t_add_service(s=v2)
state.teardown()
35 bytes [[1, [158, [[0, 2, 0, 1, 0, 3], 1]], [146, [0, 0]], [48, [1, 0]], [108, [3, [3, 0]]], [203, [1, 1]], [40, [2, 1]], [223, [0, 0]], [53, [1, 0]], [156, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [186, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [192, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
14 bytes [[1, [140, [[0, 0, 0, 0, 3], [3, 0]]], [[255, 1], [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.teardown()
38 bytes [[1, [230, [[2, 0, 0, 1, 0, 3], [3, 3, 3, 0]]], [1, [0, 0]], [227, [2, 0]], [232, [2, 0]], [51, [1, 0]], [80, [2, 0]], [30, [1, 0]], [92, [1, 0]], [183, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
16 bytes [[1, [239, [3, 0]], [[255, 1], [3, [3, 0]]], [192, [2, 0]], [255, 255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [178, [[2, 0, 3], 0]], [255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
8 bytes [[1, [234, [[0, 0, 3], 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.teardown()
8 bytes [[1, [38, [3, 1]], [1, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [217, [3, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [154, [3, 1]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [169, [[1, 0, 1, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=v1)
state.teardown()
9 bytes [[1, [225, [3, [3, 2]]], [1, [3, 2]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.teardown()
31 bytes [[1, [54, [[0, 3], 0]], [140, [1, 0]], [101, [2, 0]], [218, [0, 0]], [126, [1, 0]], [70, [1, 0]], [33, [2, 0]], [195, [0, 0]], [248, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.teardown()
33 bytes [[1, [149, [[0, 0, 1, 0, 3], 0]], [157, [1, 0]], [92, [0, 0]], [169, [1, 0]], [27, [0, 0]], [39, [1, 0]], [249, [1, 0]], [85, [0, 0]], [44, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [70, [[0, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
12 bytes [[1, [214, [[2, 0, 0, 0, 3], 0]], [92, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
v3 = state.t_add_service(s=v1)
state.t_stopoffer(s=v3)
state.t_startoffer(s=v1)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
v4 = state.t_add_service(s=v1)
state.teardown()
36 bytes [[1, [57, [[2, 0, 2, 1, 0, 3], 0]], [231, [3, 2]], [172, [0, 1]], [254, [3, 0]], [213, [2, 0]], [171, [1, 2]], [241, [1, 0]], [168, [0, [3, 2]]], [181, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v2)
state.t_startoffer(s=v2)
state.t_startoffer(s=v2)
state.teardown()
30 bytes [[1, [90, [3, 1]], [1, [1, 0]], [218, [2, 0]], [201, [1, 0]], [227, [1, 0]], [132, [3, [3, 1]]], [28, [0, 0]], [149, [1, 0]], [132, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v1)
v3 = state.t_add_service(s=3)
state.check_agree(s=v1)
v4 = state.t_add_service(s=v1)
state.t_startoffer(s=v4)
state.t_stopoffer(s=v4)
state.teardown()
27 bytes [[1, [129, [3, 1]], [35, [3, 1]], [208, [0, 1]], [192, [3, 2]], [51, [0, [3, 2]]], [222, [3, 1]], [220, [1, 0]], [194, [2, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
6 bytes [[1, [219, [3, [3, 2]]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
18 bytes [[1, [124, [[2, 0, 2, 0, 3], 0]], [114, [1, 0]], [167, [0, 0]], [238, [1, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
v3 = state.t_add_service(s=2)
state.teardown()
17 bytes [[1, [181, [3, 0]], [35, [2, 0]], [241, [3, 2]], [100, [0, 1]], [90, [3, 1]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v1)
state.teardown()
17 bytes [[1, [205, [3, 2]], [165, [3, 1]], [174, [1, 1]], [196, [2, 0]], [214, [1, 1]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.teardown()
13 bytes [[1, [[255, 85], [[0, 3], 0]], [253, [3, 1]], [152, [0, 0]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
v3 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
v4 = state.t_add_service(s=v2)
state.t_stopoffer(s=v4)
state.check_agree(s=v4)
state.check_agree(s=v2)
state.teardown()
38 bytes [[1, [203, [[1, 2, 1, 0, 3], [3, 3, 0]]], [231, [3, [3, 2]]], [89, [0, 1]], [211, [3, [3, 1]]], [112, [1, [3, 1]]], [192, [3, 2]], [163, [2, 0]], [113, [0, 0]], [217, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.teardown()
10 bytes [[1, [244, [[0, 0, 3], 2]], [1, [1, 0]], 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
35 bytes [[1, [48, [[2, 2, 1, 0, 3], 0]], [30, [1, 0]], [91, [3, 2]], [131, [2, 1]], [[255, 124], [3, [3, 2]]], [38, [1, 0]], [195, [0, 2]], [189, [0, 2]], [46, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
15 bytes [[1, [40, [3, [3, 3, 3, 3, 3, 3, 3, 1]]], [255, 255, 255, 46]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=v1)
state.teardown()
16 bytes [[1, [213, [3, 2]], [[255, 255, 255, 255, 121], [3, [3, 3, 2]]], [255, 255, 160]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
23 bytes [[1, [27, [[2, 3], [3, 3, 3, 3, 3, 1]]], [127, [2, 0]], [139, [1, 0]], [[255, 178], [3, 0]], [255, 255, 89]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v2)
v5 = state.t_add_service(s=v1)
v6 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v3)
state.teardown()
45 bytes [[1, [202, [3, [3, 3, 3, 3, 3, 3, 3, 3, 3, 0]]], [[255, 255, 241], [3, [3, 1]]], [[255, 133], [3, [3, 3, 0]]], [30, [3, [3, 3, 3, 3, 1]]], [209, [3, 0]], [145, [3, 0]], [205, [2, 4]], [145, [0, 3]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v1)
state.check_agree(s=v2)
state.t_stopoffer(s=v3)
state.t_stopoffer(s=v2)
state.teardown()
36 bytes [[1, [34, [[2, 3], [3, 3, 3, 3, 3, 2]]], [[255, 255, 255, 177], [3, 1]], [219, [0, 1]], [191, [2, 1]], [27, [3, 2]], [90, [0, [3, 1]]], [244, [2, 0]], [1, [2, 1]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 9]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [252, [3, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
17 bytes [[1, [225, [[0, 1, 0, 1, 0, 3], [3, 2]]], [1, [0, 0]], [248, [1, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v2)
v3 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.t_startoffer(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v2)
state.teardown()
33 bytes [[1, [209, [[2, 0, 2, 0, 3], 0]], [65, [1, 0]], [156, [3, 0]], [146, [0, 0]], [91, [3, 1]], [27, [0, 1]], [74, [1, 1]], [75, [0, 2]], [169, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [185, [3, 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [164, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [52, [[0, 0, 0, 3, 0, 3], 1]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [62, [[0, 0, 0, 3, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
6 bytes [[1, [62, [3, [3, 1]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
v3 = state.t_add_service(s=v2)
state.teardown()
25 bytes [[1, [74, [[2, 0, 2, 1, 0, 3], [3, 3, 0]]], [141, [3, [3, 1]]], [209, [0, 1]], [42, [0, 1]], [105, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v2)
state.teardown()
33 bytes [[1, [62, [[0, 1, 0, 0, 3], 0]], [64, [2, 0]], [163, [2, 0]], [228, [1, 0]], [28, [1, 0]], [37, [1, 0]], [99, [3, 2]], [43, [2, 1]], [172, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [73, [[1, 0, 0, 1, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.teardown()
12 bytes [[1, [217, [[0, 2, 1, 0, 3], 2]], [1, [1, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_startoffer(s=v2)
state.t_startoffer(s=v2)
v3 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
32 bytes [[1, [66, [[1, 3], 2]], [210, [2, 0]], [97, [1, 0]], [113, [3, 2]], [196, [1, 0]], [204, [1, 0]], [54, [3, 1]], [59, [0, [3, 3, 2]]], [228, [2, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.teardown()
14 bytes [[1, [253, [[1, 1, 0, 1, 0, 3], [3, 1]]], [1, [3, 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [178, [[0, 0, 2, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [231, [[1, 1, 1, 0, 3], [3, 1]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v3 = state.t_add_service(s=3)
v4 = state.t_add_service(s=2)
state.check_agree(s=v3)
v5 = state.t_add_service(s=v4)
state.check_agree(s=v4)
state.teardown()
34 bytes [[1, [123, [[0, 0, 1, 1, 0, 3], 0]], [132, [3, 0]], [122, [2, 1]], [182, [1, 1]], [62, [3, 2]], [45, [3, 1]], [28, [0, 1]], [132, [3, 1]], [144, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [228, [3, 1]], [255, 255, 110]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [162, [3, [3, 1]]], [35, [3, 0]], [255, 255, 42]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
v3 = state.t_add_service(s=3)
v4 = state.t_add_service(s=v3)
state.check_agree(s=v2)
v5 = state.t_add_service(s=v1)
state.t_startoffer(s=v3)
v6 = state.t_add_service(s=1)
state.teardown()
48 bytes [[1, [121, [3, [3, 3, 3, 3, 1]]], [[255, 255, 255, 207], [3, [3, 3, 3, 3, 1]]], [210, [1, 1]], [[255, 255, 255, 255, 255, 255, 31], [3, [3, 2]]], [235, [3, 2]], [71, [0, 2]], [145, [3, 1]], [106, [1, [6, 2]]], [66, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.teardown()
21 bytes [[1, [55, [3, [3, 3, 3, 3, 3, 3, 1]]], [[255, 160], [3, [3, 3, 3, 0]]], [255, 255, 255, 93]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=1)
v4 = state.t_add_service(s=v2)
state.check_agree(s=v2)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v2)
state.teardown()
56 bytes [[1, [250, [[0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1]]], [[255, 255, 236], [3, [3, 3, 3, 3, 3, 3, 3, 3, 2]]], [147, [3, 0]], [247, [3, 2]], [110, [0, 2]], [33, [2, 3]], [231, [0, 2]], [178, [2, 3]], [208, [1, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v3)
v4 = state.t_add_service(s=3)
state.check_agree(s=v3)
state.check_agree(s=v3)
state.t_startoffer(s=v2)
state.t_startoffer(s=v1)
state.teardown()
33 bytes [[1, [161, [[1, 3], [3, 3, 3, 1]]], [219, [3, 0]], [35, [3, 0]], [63, [1, 0]], [77, [3, 2]], [81, [0, 1]], [197, [0, 1]], [223, [1, 2]], [209, [1, 3]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
state.teardown()
22 bytes [[1, [184, [[0, 3], 1]], [53, [2, 0]], [[255, 97], [3, 0]], [177, [3, 0]], [57, [1, 0]], [185, [0, 2]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
11 bytes [[1, [175, [[0, 0, 0, 2, 0, 3], [3, 2]]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
8 bytes [[1, [223, [[1, 3], 0]], [255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [252, [[1, 3], [3, 1]]], [255, 255, 47]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [240, [3, 1]], [[255, 239], [3, [3, 3, 0]]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [119, [[0, 0, 3], [3, 3, 1]]], [32, [1, 0]], [77, [0, 0]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
17 bytes [[1, [209, [[1, 3], [3, 1]]], [[255, 253], [1, 0]], [179, [2, 0]], [83, [0, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
17 bytes [[1, [141, [[0, 3], [3, 1]]], [[255, 249], [1, 0]], [163, [3, [3, 3, 0]]], [255, 16]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
8 bytes [[1, [139, [[2, 0, 3], 2]], [255, 11]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.teardown()
12 bytes [[1, [251, [[0, 0, 0, 0, 3], 0]], [1, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
8 bytes [[1, [46, [3, [3, 3, 1]]], [255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
12 bytes [[1, [154, [[0, 0, 0, 3, 0, 3], [3, 3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
23 bytes [[1, [105, [[1, 1, 3], [3, 0]]], [1, [3, [3, 3, 3, 1]]], [72, [1, 0]], [182, [1, 1]], [60, [1, 1]], 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
8 bytes [[1, [131, [[2, 3], 2]], [255, 255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [232, [3, 1]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
8 bytes [[1, [221, [[2, 1, 3], 2]], [255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
28 bytes [[1, [179, [[1, 0, 3], [3, 3, 3, 3, 3, 2]]], [45, [1, 0]], [[255, 194], [0, 0]], [146, [2, 0]], [253, [2, 0]], [50, [0, 0]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [211, [3, [3, 1]]], [1, [3, [3, 3, 0]]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
v4 = state.t_add_service(s=v1)
state.t_stopoffer(s=v4)
state.t_stopoffer(s=v3)
state.t_startoffer(s=v2)
state.t_stopoffer(s=v3)
v5 = state.t_add_service(s=v2)
state.teardown()
32 bytes [[1, [123, [[1, 3], [3, 0]]], [39, [3, 1]], [77, [3, 1]], [37, [3, 0]], [54, [2, 0]], [185, [2, 1]], [49, [1, 2]], [39, [2, 1]], [159, [3, [3, 1]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [24, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
24 bytes [[1, [148, [[0, 0, 0, 0, 3], 0]], [83, [0, 0]], [214, [1, 0]], [177, [3, 2]], [88, [1, 1]], [172, [0, 1]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [95, [[0, 0, 0, 0, 3], 0]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [54, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [71, [[0, 0, 0, 2, 0, 3], 0]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [184, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [66, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
14 bytes [[1, [161, [[2, 0, 3], [3, 0]]], [186, [2, 0]], [137, [1, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [250, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.check_agree(s=v1)
v3 = state.t_add_service(s=1)
state.t_startoffer(s=v2)
state.t_startoffer(s=v3)
state.teardown()
35 bytes [[1, [159, [[2, 1, 1, 0, 3], 1]], [115, [0, 0]], [230, [2, 0]], [249, [3, [3, 2]]], [60, [0, 1]], [112, [0, 1]], [122, [3, [3, 0]]], [196, [1, 1]], [247, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.teardown()
14 bytes [[1, [116, [3, [3, 1]]], [204, [3, [3, 3, 3, 3, 2]]], [255, 58]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v1)
state.teardown()
33 bytes [[1, [159, [[0, 1, 3], [3, 3, 3, 2]]], [147, [3, [3, 2]]], [201, [3, 2]], [247, [3, [3, 3, 3, 2]]], [93, [2, 2]], [188, [2, 2]], [[255, 122], [1, 3]], 11]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [104, [[0, 3], 1]], [255, 20]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
19 bytes [[1, [121, [[1, 2, 2, 1, 0, 3], 1]], [216, [1, 0]], [166, [0, 0]], [49, [1, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [61, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
Traceback (most recent call last):
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 598, in evaluate_test_data
    result = self.execute(data)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 563, in execute
    result = self.test_runner(data, run)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\executors.py", line 56, in default_new_style_executor
    return function(data)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 561, in run
    return test(*args, **kwargs)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py", line 122, in run_state_machine
    machine.execute_step(value)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py", line 800, in execute_step
    result = rule.function(self, **data)
  File "D:\shared\visabo\test_SD.py", line 74, in check_agree
    assert self.service_dict[s].service_available == canoeapp.MyTest_returnvalue1()
AssertionError: assert True == False
 +  where True = <statemodel.service object at 0x0000026E3C997808>.service_available
 +  and   False = <bound method CanoeSync.MyTest_returnvalue1 of <canoe.CanoeSync object at 0x0000026E3C57E3C8>>()
 +    where <bound method CanoeSync.MyTest_returnvalue1 of <canoe.CanoeSync object at 0x0000026E3C57E3C8>> = <canoe.CanoeSync object at 0x0000026E3C57E3C8>.MyTest_returnvalue1

16 bytes [[1, [249, [[2, 0, 0, 0, 3], [3, 0]]], [[255, 1], [1, 0]], [134, [0, 0]]]] -> Status.INTERESTING ((<class 'AssertionError'>, 'D:\\shared\\visabo\\test_SD.py', 74)), 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v2)
state.t_stopoffer(s=v1)
state.teardown()
23 bytes [[1, [209, [3, [3, 3, 1]]], [227, [1, 0]], [251, [0, 0]], [210, [3, [3, 1]]], [141, [0, 0]], [199, [2, 1]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [251, [[2, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [195, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [198, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=2)
state.teardown()
32 bytes [[1, [248, [[0, 3], 0]], [63, [0, 0]], [42, [2, 0]], [175, [3, [3, 0]]], [234, [2, 1]], [98, [2, 0]], [118, [1, 1]], [38, [2, 1]], [151, [3, [3, 1]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
state.teardown()
9 bytes [[1, [221, [3, [3, 0]]], [63, [3, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
26 bytes [[1, [205, [[1, 1, 0, 1, 0, 3], 2]], [138, [3, [3, 1]]], [107, [2, 1]], [251, [2, 0]], [31, [0, 1]], [118, [2, 0]], 19]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [203, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 14]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [134, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [190, [[1, 0, 2, 0, 3], 2]], 5]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
18 bytes [[1, [179, [[0, 3], 0]], [157, [3, 1]], [144, [0, 1]], [237, [0, 1]], [228, [2, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.teardown()
25 bytes [[1, [228, [[1, 0, 3], 2]], [74, [2, 0]], [193, [0, 0]], [219, [3, 0]], [248, [1, 1]], [205, [2, 1]], [236, [3, 0]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [158, [3, [3, 2]]], [136, [1, 0]], [33, [0, 0]], [48, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v2)
state.t_stopoffer(s=v3)
state.teardown()
20 bytes [[1, [192, [[0, 1, 3], 1]], [196, [3, 1]], [154, [3, [3, 1]]], [157, [1, 1]], [201, [2, 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
state.check_agree(s=v2)
state.check_agree(s=v3)
v4 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.t_startoffer(s=v3)
state.teardown()
32 bytes [[1, [65, [[1, 1, 3], 2]], [120, [2, 0]], [52, [3, 2]], [42, [3, [3, 2]]], [224, [0, 1]], [98, [0, 0]], [73, [3, 0]], [213, [0, 2]], [200, [1, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 19]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.teardown()
25 bytes [[1, [242, [[1, 0, 3], 2]], [74, [2, 0]], [193, [0, 0]], [219, [3, 0]], [248, [1, 1]], [205, [2, 1]], [232, [3, 0]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.check_agree(s=v2)
state.teardown()
21 bytes [[1, [240, [[2, 3], 2]], [238, [1, 0]], [79, [3, 2]], [169, [2, 0]], [50, [2, 0]], [197, [0, 0]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v2)
state.teardown()
33 bytes [[1, [94, [[2, 0, 1, 0, 3], 2]], [55, [1, 0]], [120, [0, 0]], [111, [1, 0]], [214, [0, 0]], [114, [1, 0]], [143, [3, 2]], [140, [2, 0]], [101, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.teardown()
21 bytes [[1, [70, [[1, 3], 2]], [174, [1, 0]], [79, [3, 2]], [169, [2, 0]], [50, [2, 0]], [197, [2, 0]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v1)
state.t_stopoffer(s=v4)
state.t_startoffer(s=v4)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.teardown()
32 bytes [[1, [1, [[0, 0, 3], 1]], [196, [3, 1]], [154, [3, [3, 1]]], [159, [3, 1]], [201, [2, 0]], [136, [1, 0]], [253, [0, 2]], [164, [0, 2]], [99, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [151, [[1, 3], [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v2)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v2)
state.t_startoffer(s=v1)
state.teardown()
33 bytes [[1, [152, [[0, 0, 1, 0, 3], 1]], [73, [0, 0]], [26, [1, 0]], [38, [3, 2]], [149, [0, 0]], [122, [2, 0]], [219, [0, 1]], [253, [0, 0]], [36, [1, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v2)
v3 = state.t_add_service(s=1)
state.teardown()
21 bytes [[1, [228, [[2, 3], 2]], [174, [1, 0]], [207, [3, 2]], [169, [2, 0]], [178, [0, 0]], [196, [3, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
state.teardown()
8 bytes [[1, [231, [3, 2]], [1, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
15 bytes [[1, [41, [[1, 1, 0, 0, 3], 1]], [1, [0, 0]], [26, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v3)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.teardown()
32 bytes [[1, [35, [[2, 2, 3], 0]], [30, [3, 2]], [99, [0, 1]], [238, [2, 1]], [99, [3, 2]], [166, [0, 2]], [103, [0, [3, 0]]], [97, [2, 1]], [104, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
13 bytes [[1, [104, [[1, 3], [3, 2]]], [119, [0, 0]], [1, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 13]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v3)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v3)
v4 = state.t_add_service(s=1)
state.teardown()
36 bytes [[1, [144, [[0, 3], [3, 3, 1]]], [71, [0, 0]], [115, [3, 1]], [211, [3, [3, 1]]], [103, [1, 0]], [75, [2, [3, 2]]], [30, [2, [3, 1]]], [109, [1, 0]], [95, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [181, [[0, 1, 2, 0, 3], 0]], [123, [0, 0]], [41, [0, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
6 bytes [[1, [213, [[0, 3], 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=v2)
v4 = state.t_add_service(s=v2)
state.teardown()
31 bytes [[1, [249, [3, [3, 3, 1]]], [1, [0, 0]], [64, [0, 0]], [119, [2, 0]], [46, [2, 0]], [78, [1, 0]], [141, [3, 2]], [253, [3, 2]], [47, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [175, [[1, 1, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
31 bytes [[1, [186, [[2, 3], 0]], [186, [1, 0]], [63, [2, 0]], [228, [2, 0]], [[255, 236], [1, 0]], [157, [1, 0]], [245, [1, 0]], [39, [0, 0]], [99, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [155, [[1, 1, 3], 1]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [64, [3, [3, 3, 3, 0]]], [255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v1)
state.teardown()
19 bytes [[1, [75, [3, [3, 3, 3, 3, 2]]], [105, [3, 1]], [27, [3, 1]], [27, [1, 2]], [255, 25]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=1)
state.teardown()
24 bytes [[1, [173, [3, [3, 3, 3, 1]]], [[255, 173], [3, [3, 3, 3, 3, 3, 3, 2]]], [[255, 209], [3, [3, 3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
14 bytes [[1, [174, [3, [3, 3, 3, 0]]], [[255, 255, 255, 1], [2, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v2)
state.t_stopoffer(s=v1)
state.teardown()
29 bytes [[1, [183, [[1, 1, 1, 1, 0, 3], [3, 0]]], [135, [1, 0]], [236, [2, 0]], [83, [0, 0]], [241, [3, 2]], [64, [0, 0]], [76, [2, 1]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.t_startoffer(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.teardown()
31 bytes [[1, [121, [[1, 3], [3, 1]]], [1, [3, 2]], [121, [1, 0]], [57, [0, 0]], [247, [0, 0]], [143, [1, 1]], [154, [1, 1]], [139, [2, 1]], [129, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v2)
state.teardown()
12 bytes [[1, [186, [3, 1]], [186, [3, [3, 2]]], [48, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.teardown()
18 bytes [[1, [145, [[1, 1, 1, 0, 3], 2]], [131, [2, 0]], [118, [3, 0]], [83, [3, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
10 bytes [[1, [44, [[1, 0, 0, 1, 0, 3], 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [127, [[2, 0, 3], 0]], [255, 255, 255, 58]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [88, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [57, [3, [3, 3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [151, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v3)
state.t_startoffer(s=v3)
v4 = state.t_add_service(s=2)
v5 = state.t_add_service(s=v4)
state.t_startoffer(s=v4)
state.check_agree(s=v4)
state.teardown()
39 bytes [[1, [27, [[1, 0, 2, 0, 3], [3, 0]]], [139, [3, 0]], [63, [3, 0]], [201, [1, 0]], [31, [1, 0]], [101, [3, 1]], [114, [3, [3, 1]]], [93, [1, [5, 1]]], [81, [0, [5, 7, 5, 1]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.teardown()
12 bytes [[1, [63, [[1, 3], [3, 3, 0]]], [[255, 239], [3, 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v1)
state.check_agree(s=v4)
v5 = state.t_add_service(s=3)
state.teardown()
26 bytes [[1, [106, [[1, 0, 2, 0, 3], [3, 0]]], [139, [3, 0]], [47, [3, 0]], [201, [3, 0]], [29, [0, 0]], [101, [3, [3, 2]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
21 bytes [[1, [56, [[0, 1, 2, 0, 3], 0]], [123, [0, 0]], [41, [0, 0]], [117, [2, 0]], [155, [2, 0]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [53, [3, [3, 1]]], [1, [0, 0]], [67, [1, 0]], [65, [0, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [33, [3, 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v2)
state.teardown()
19 bytes [[1, [156, [[0, 2, 0, 0, 3], 1]], [80, [3, 0]], [91, [3, [3, 1]]], [89, [1, 1]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [213, [[0, 2, 0, 0, 3], 0]], 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.teardown()
13 bytes [[1, [65, [[2, 0, 3], 0]], [55, [0, 0]], [1, [3, 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
6 bytes [[1, [24, [[0, 3], 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [176, [[1, 3], 0]], [[255, 106], [3, 1]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
6 bytes [[1, [81, [[0, 3], 2]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.t_startoffer(s=v2)
state.teardown()
18 bytes [[1, [24, [3, [3, 0]]], [[255, 148], [3, [3, 3, 1]]], [51, [1, 0]], [29, [1, 0]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
state.t_stopoffer(s=v3)
v4 = state.t_add_service(s=v2)
state.check_agree(s=v2)
state.teardown()
31 bytes [[1, [169, [[0, 3], [3, 1]]], [36, [1, 0]], [213, [3, 0]], [207, [3, 1]], [111, [1, 0]], [247, [0, 2]], [134, [2, 0]], [241, [3, 0]], [253, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
6 bytes [[1, [142, [[1, 3], 1]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
11 bytes [[1, [49, [3, 2]], [198, [0, 0]], [220, [2, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [57, [[0, 1, 1, 1, 0, 3], 1]], 14]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [214, [[0, 1, 2, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
12 bytes [[1, [193, [[0, 1, 2, 0, 3], [3, 3, 3, 1]]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [129, [[0, 0, 1, 1, 0, 3], 0]], 19]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.teardown()
8 bytes [[1, [165, [3, 1]], [120, [1, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=1)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.teardown()
36 bytes [[1, [90, [[2, 2, 2, 2, 0, 3], [3, 1]]], [61, [2, 0]], [195, [0, 0]], [249, [3, 2]], [235, [2, 1]], [69, [2, 1]], [164, [3, 0]], [97, [2, [3, 1]]], [241, [2, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v1)
state.check_agree(s=v1)
state.teardown()
19 bytes [[1, [254, [[1, 1, 3], 1]], [171, [3, 1]], [69, [2, 1]], [228, [3, 1]], [115, [0, 2]], 15]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
10 bytes [[1, [51, [[1, 1, 0, 1, 0, 3], 2]], 9]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
29 bytes [[1, [78, [3, 0]], [134, [2, 0]], [66, [1, 0]], [48, [0, 0]], [112, [0, 0]], [1, [3, 0]], [100, [2, 1]], [179, [2, 1]], [40, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [112, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [219, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [104, [[0, 2, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [90, [[2, 1, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [224, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v2)
state.t_startoffer(s=v3)
state.t_startoffer(s=v3)
v4 = state.t_add_service(s=3)
state.teardown()
31 bytes [[1, [32, [3, 0]], [[255, 228], [2, 0]], [70, [2, 0]], [240, [3, 1]], [167, [3, 1]], [66, [1, 1]], [30, [1, 0]], [119, [1, [3, 0]]], [176, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 15]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=1)
v4 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
v5 = state.t_add_service(s=v3)
state.check_agree(s=v3)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
state.teardown()
38 bytes [[1, [89, [[1, 1, 1, 1, 0, 3], 1]], [141, [3, 2]], [145, [3, [3, 0]]], [96, [3, 1]], [196, [1, 3]], [105, [3, [3, 3, 0]]], [107, [0, 2]], [250, [1, [7, 2]]], [44, [0, 4]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
11 bytes [[1, [142, [[2, 0, 3], 0]], [[255, 128], [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.t_startoffer(s=v2)
state.teardown()
37 bytes [[1, [188, [[1, 1, 1, 1, 0, 3], 0]], [1, [0, 0]], [215, [3, 1]], [242, [3, [3, 1]]], [157, [0, 2]], [123, [1, [3, 3, 2]]], [236, [2, 1]], [32, [0, 2]], [207, [1, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [133, [[1, 2, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v2)
state.teardown()
23 bytes [[1, [132, [[1, 1, 0, 1, 0, 3], [3, 1]]], [30, [0, 0]], [83, [1, 0]], [239, [3, 2]], [208, [2, 0]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [25, [[1, 0, 1, 0, 3], 2]], 15]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [55, [[2, 0, 1, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.teardown()
16 bytes [[1, [128, [[0, 3], [3, 1]]], [1, [3, [3, 3, 3, 3, 3, 3, 1]]], 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [252, [3, [3, 3, 0]]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v2)
state.teardown()
29 bytes [[1, [75, [[1, 1, 3], 2]], [126, [2, 0]], [[255, 218], [0, 0]], [162, [0, 0]], [83, [0, 0]], [177, [3, 0]], [178, [1, 1]], [154, [0, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [85, [3, 1]], 7]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.teardown()
8 bytes [[1, [238, [3, 2]], [64, [2, 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.teardown()
18 bytes [[1, [128, [[2, 0, 1, 0, 3], 0]], [129, [1, 0]], [167, [3, 1]], [152, [0, 0]], 9]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.teardown()
9 bytes [[1, [247, [3, [3, 1]]], [1, [1, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.teardown()
29 bytes [[1, [189, [[1, 2, 1, 1, 0, 3], 0]], [181, [2, 0]], [224, [1, 0]], [195, [0, 0]], [90, [1, 0]], [42, [2, 0]], [174, [3, [3, 0]]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v3)
state.t_startoffer(s=v3)
state.teardown()
34 bytes [[1, [247, [[0, 0, 0, 0, 3], 0]], [1, [3, 1]], [202, [1, 0]], [215, [0, 0]], [206, [0, 0]], [63, [2, 0]], [162, [3, 1]], [211, [0, 0]], [95, [1, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
28 bytes [[1, [62, [[0, 1, 3], 1]], [1, [0, 0]], [1, [0, 0]], [1, [1, 0]], [1, [1, 0]], [1, [1, 0]], [1, [0, 0]], [62, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [48, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=2)
state.teardown()
23 bytes [[1, [88, [[0, 0, 0, 3, 3, 0, 3], 0]], [124, [1, 0]], [42, [1, 0]], [115, [2, 0]], [202, [3, 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [66, [[0, 0, 3], [3, 3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.teardown()
19 bytes [[1, [154, [[0, 0, 1, 1, 0, 3], [3, 0]]], [[255, 1], [3, [3, 1]]], [255, 255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
19 bytes [[1, [103, [[0, 0, 3], 0]], [96, [1, 0]], [26, [0, 0]], [50, [0, 0]], [135, [0, 0]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [236, [[2, 0, 2, 0, 3], 0]], [223, [1, 0]], [93, [0, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
33 bytes [[1, [51, [[0, 0, 2, 0, 3], 2]], [144, [2, 0]], [139, [2, 0]], [190, [0, 0]], [80, [2, 0]], [121, [0, 0]], [226, [0, 0]], [63, [1, 0]], [26, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [166, [[0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.teardown()
12 bytes [[1, [244, [[1, 0, 0, 0, 3], 2]], [189, [0, 0]], 7]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.check_agree(s=v1)
v3 = state.t_add_service(s=v1)
state.teardown()
30 bytes [[1, [24, [3, 1]], [98, [2, 0]], [28, [1, 0]], [178, [0, 0]], [78, [0, 0]], [125, [3, [3, 2]]], [37, [0, 1]], [63, [0, 1]], [232, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
13 bytes [[1, [176, [[2, 0, 0, 0, 3], 0]], [1, [0, 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [153, [[1, 3], [3, 0]]], [255, 255, 255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=1)
state.teardown()
34 bytes [[1, [219, [[0, 1, 0, 0, 3], [3, 1]]], [42, [1, 0]], [210, [0, 0]], [133, [3, 1]], [125, [2, 1]], [151, [2, 1]], [30, [0, 1]], [44, [2, 0]], [183, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [182, [[2, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [95, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [104, [[2, 3], [3, 3, 0]]], [255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [217, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
18 bytes [[1, [77, [3, 1]], [[255, 155], [0, 0]], [126, [0, 0]], [254, [0, 0]], [110, [0, 0]], 15]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [159, [[1, 3], 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [138, [[1, 3], 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.teardown()
8 bytes [[1, [87, [3, 0]], [1, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
12 bytes [[1, [160, [[0, 0, 0, 0, 3], 0]], [68, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.teardown()
33 bytes [[1, [134, [[0, 0, 1, 0, 3], 1]], [120, [0, 0]], [50, [1, 0]], [47, [1, 0]], [126, [1, 0]], [133, [0, 0]], [68, [3, 2]], [162, [0, 0]], [52, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
19 bytes [[1, [248, [[2, 2, 0, 1, 0, 3], 0]], [205, [0, 0]], [203, [3, 0]], [173, [2, 1]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.teardown()
16 bytes [[1, [191, [[1, 0, 0, 0, 3], [3, 1]]], [89, [1, 0]], [167, [3, 1]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.t_startoffer(s=v3)
state.check_agree(s=v3)
state.teardown()
37 bytes [[1, [142, [[1, 2, 2, 1, 0, 3], 1]], [115, [1, 0]], [240, [0, 0]], [227, [2, 0]], [232, [3, 1]], [229, [3, 0]], [148, [0, [3, 3, 3, 1]]], [143, [1, 0]], [94, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
9 bytes [[1, [154, [[0, 3], 0]], [1, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
18 bytes [[1, [112, [[2, 0, 0, 1, 0, 3], [3, 3, 2]]], [180, [0, 0]], [29, [1, 0]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [124, [[1, 0, 0, 0, 3], [3, 3, 3, 2]]], [180, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
12 bytes [[1, [204, [[0, 0, 0, 3, 3, 0, 3], [3, 0]]], 7]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
v3 = state.t_add_service(s=v1)
state.teardown()
26 bytes [[1, [214, [[2, 1, 0, 0, 3], 0]], [1, [0, 0]], [[255, 234], [2, 0]], [249, [3, 2]], [106, [1, 1]], [189, [3, [3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
13 bytes [[1, [52, [[1, 0, 0, 1, 0, 3], [3, 1]]], [255, 255, 189]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [111, [[2, 1, 3], 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 11]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.teardown()
35 bytes [[1, [59, [[2, 2, 0, 1, 0, 3], 2]], [202, [1, 0]], [152, [2, 0]], [217, [3, 1]], [157, [1, 0]], [228, [0, 0]], [96, [0, 1]], [185, [2, 1]], [125, [3, [3, 1]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
10 bytes [[1, [181, [[1, 1, 2, 1, 0, 3], 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v2)
v3 = state.t_add_service(s=v1)
state.teardown()
35 bytes [[1, [194, [[2, 2, 2, 2, 0, 3], 0]], [187, [1, 0]], [177, [2, 0]], [218, [2, 0]], [49, [3, 0]], [24, [0, 1]], [244, [2, 0]], [36, [0, 0]], [154, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v2)
state.teardown()
19 bytes [[1, [1, [[1, 1, 0, 0, 3], 1]], [46, [3, [3, 0]]], [136, [1, 1]], [126, [1, 0]], 13]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=3)
state.teardown()
17 bytes [[1, [113, [3, 1]], [131, [1, 0]], [131, [3, 1]], [131, [3, 1]], [131, [3, 2]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
34 bytes [[1, [170, [[1, 0, 2, 0, 3], [3, 2]]], [194, [0, 0]], [96, [1, 0]], [46, [1, 0]], [254, [1, 0]], [232, [1, 0]], [203, [2, 0]], [35, [2, 0]], [101, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=v2)
state.teardown()
34 bytes [[1, [205, [[0, 1, 0, 0, 3], [3, 1]]], [35, [1, 0]], [210, [0, 0]], [133, [3, 0]], [125, [2, 1]], [151, [2, 1]], [30, [0, 0]], [44, [2, 0]], [31, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.t_startoffer(s=v1)
state.teardown()
25 bytes [[1, [196, [[2, 1, 3], 0]], [1, [2, 0]], [246, [0, 0]], [97, [3, 1]], [136, [2, 1]], [30, [0, 0]], [123, [1, 1]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=3)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
v4 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.check_agree(s=v3)
state.teardown()
37 bytes [[1, [245, [[1, 0, 0, 0, 3], [3, 1]]], [88, [1, 0]], [167, [3, 1]], [1, [3, 2]], [32, [1, 0]], [37, [0, [3, 3, 3, 2]]], [246, [3, 0]], [147, [0, 2]], [77, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.check_agree(s=v1)
state.teardown()
25 bytes [[1, [215, [[2, 1, 3], 0]], [1, [2, 0]], [246, [0, 0]], [97, [3, 1]], [136, [2, 1]], [30, [0, 0]], [31, [0, 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [144, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=1)
state.t_stopoffer(s=v3)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
34 bytes [[1, [42, [[2, 2, 0, 1, 0, 3], 2]], [96, [2, 0]], [70, [1, 0]], [64, [3, 1]], [46, [2, 1]], [216, [3, 0]], [165, [2, 0]], [90, [1, 2]], [236, [2, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
state.teardown()
11 bytes [[1, [223, [3, 1]], [197, [3, 1]], [197, [1, 1]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [174, [[2, 0, 0, 0, 3], 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.teardown()
11 bytes [[1, [1, [3, 0]], [1, [3, 1]], [1, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
17 bytes [[1, [195, [[0, 3], [3, 3, 3, 2]]], [205, [0, 0]], [[255, 200], [1, 0]], [255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [82, [3, [3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [77, [[1, 0, 3], [3, 3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
11 bytes [[1, [74, [[0, 1, 3], [3, 3, 3, 1]]], [255, 14]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [157, [3, [3, 3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=2)
state.teardown()
30 bytes [[1, [67, [[2, 3], 0]], [246, [1, 0]], [172, [0, 0]], [148, [0, 0]], [75, [1, 0]], [223, [1, 0]], [215, [2, 0]], [168, [3, 2]], [158, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [64, [[1, 0, 1, 0, 3], 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [243, [[1, 0, 0, 0, 3], 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [170, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
20 bytes [[1, [176, [3, 0]], [32, [0, 0]], [45, [2, 0]], [55, [0, 0]], [40, [1, 0]], [141, [0, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 7]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
35 bytes [[1, [134, [[2, 2, 1, 1, 0, 3], [3, 1]]], [103, [0, 0]], [237, [3, 1]], [39, [2, 1]], [234, [2, 1]], [230, [1, 1]], [118, [2, 0]], [177, [0, 1]], [59, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
9 bytes [[1, [191, [3, 0]], [[255, 1], [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
6 bytes [[1, [72, [[0, 3], 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
12 bytes [[1, [138, [[0, 0, 0, 1, 0, 3], 0]], [255, 255, 134]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
29 bytes [[1, [206, [3, 0]], [94, [0, 0]], [209, [1, 0]], [77, [1, 0]], [180, [0, 0]], [170, [2, 0]], [239, [1, 0]], [71, [0, 0]], [40, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [254, [3, 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [118, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [104, [[1, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [127, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
16 bytes [[1, [249, [[2, 0, 0, 0, 3], [3, 0]]], [[255, 1], [1, 0]], [134, [0, 0]]]] -> Status.OVERRUN, 
16 bytes [[1, [249, [[2, 0, 0, 0, 3], [3, 0]]], [[255, 1], [1, 0]], [134, [0, 0]]]] -> Status.INTERESTING ((<class 'AssertionError'>, 'D:\\shared\\visabo\\test_SD.py', 74)), 
Run complete after 351 examples (348 valid) and 0 shrinks
Falsifying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
Traceback (most recent call last):
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 696, in run
    info.__expected_traceback,
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 563, in execute
    result = self.test_runner(data, run)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\executors.py", line 56, in default_new_style_executor
    return function(data)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 561, in run
    return test(*args, **kwargs)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py", line 118, in run_state_machine
    while should_continue.more():
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\utils.py", line 392, in more
    should_continue = biased_coin(self.data, p_continue)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\utils.py", line 219, in biased_coin
    i = data.draw_bits(bits)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py", line 936, in draw_bits
    self.__check_capacity(n_bytes)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py", line 990, in __check_capacity
    self.mark_overrun()
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py", line 1007, in mark_overrun
    self.conclude_test(Status.OVERRUN)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py", line 998, in conclude_test
    raise StopTest(self.testcounter)
hypothesis.errors.StopTest: 352

F

================================== FAILURES ===================================
________________________________ Test1.runTest ________________________________

self = <hypothesis.core.StateForActualGivenExecution object at 0x0000026E3C5C85C8>

    def run(self):
        # Tell pytest to omit the body of this function from tracebacks
        __tracebackhide__ = True
        if global_force_seed is None:
            database_key = function_digest(self.test)
        else:
            database_key = None
        runner = ConjectureRunner(
            self.evaluate_test_data,
            settings=self.settings,
            random=self.random,
            database_key=database_key,
        )
        try:
            runner.run()
        finally:
            self.used_examples_from_database = runner.used_examples_from_database
        note_engine_for_statistics(runner)
    
        self.used_examples_from_database = runner.used_examples_from_database
    
        if runner.call_count == 0:
            return
        if runner.interesting_examples:
            self.falsifying_examples = sorted(
                [d for d in runner.interesting_examples.values()],
                key=lambda d: sort_key(d.buffer),
                reverse=True,
            )
        else:
            if runner.valid_examples == 0:
                raise Unsatisfiable(
                    "Unable to satisfy assumptions of hypothesis %s."
                    % (get_pretty_function_description(self.test),)
                )
    
        if not self.falsifying_examples:
            return
        elif not self.settings.report_multiple_bugs:
            del self.falsifying_examples[:-1]
    
        self.failed_normally = True
    
        flaky = 0
    
        for falsifying_example in self.falsifying_examples:
            info = falsifying_example.extra_information
    
            ran_example = ConjectureData.for_buffer(falsifying_example.buffer)
            self.__was_flaky = False
            assert info.__expected_exception is not None
            try:
                self.execute(
                    ran_example,
                    print_example=True,
                    is_final=True,
                    expected_failure=(
                        info.__expected_exception,
>                       info.__expected_traceback,
                    ),
                )

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py:696: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <hypothesis.core.StateForActualGivenExecution object at 0x0000026E3C5C85C8>
data = ConjectureData(OVERRUN, 16 bytes, frozen), print_example = True
is_final = True
expected_failure = (AssertionError('assert True == False\n +  where True = <statemodel.service object at 0x0000026E3C997808>.service_avai...canoe.CanoeSync object at 0x0000026E3C57E3C8>> = <canoe.CanoeSync object at 0x0000026E3C57E3C8>.MyTest_returnvalue1\n')

    def execute(self, data, print_example=False, is_final=False, expected_failure=None):
        text_repr = [None]
        if self.settings.deadline is None:
            test = self.test
        else:
    
            @proxies(self.test)
            def test(*args, **kwargs):
                self.__test_runtime = None
                initial_draws = len(data.draw_times)
                start = benchmark_time()
                result = self.test(*args, **kwargs)
                finish = benchmark_time()
                internal_draw_time = sum(data.draw_times[initial_draws:])
                runtime = datetime.timedelta(
                    seconds=finish - start - internal_draw_time
                )
                self.__test_runtime = runtime
                current_deadline = self.settings.deadline
                if not is_final:
                    current_deadline = (current_deadline // 4) * 5
                if runtime >= current_deadline:
                    raise DeadlineExceeded(runtime, self.settings.deadline)
                return result
    
        def run(data):
            if not hasattr(data, "can_reproduce_example_from_repr"):
                data.can_reproduce_example_from_repr = True
            with local_settings(self.settings):
                with deterministic_PRNG():
                    with BuildContext(data, is_final=is_final):
                        args, kwargs = data.draw(self.search_strategy)
                        if expected_failure is not None:
                            text_repr[0] = arg_string(test, args, kwargs)
    
                        if print_example:
                            example = "%s(%s)" % (
                                test.__name__,
                                arg_string(test, args, kwargs),
                            )
                            try:
                                ast.parse(example)
                            except SyntaxError:
                                data.can_reproduce_example_from_repr = False
                            report("Falsifying example: %s" % (example,))
                        elif current_verbosity() >= Verbosity.verbose:
                            report(
                                lambda: "Trying example: %s(%s)"
                                % (test.__name__, arg_string(test, args, kwargs))
                            )
                        return test(*args, **kwargs)
    
>       result = self.test_runner(data, run)

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

data = ConjectureData(OVERRUN, 16 bytes, frozen)
function = <function StateForActualGivenExecution.execute.<locals>.run at 0x0000026E3CD24DC8>

    def default_new_style_executor(data, function):
>       return function(data)

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\executors.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

data = ConjectureData(OVERRUN, 16 bytes, frozen)

    def run(data):
        if not hasattr(data, "can_reproduce_example_from_repr"):
            data.can_reproduce_example_from_repr = True
        with local_settings(self.settings):
            with deterministic_PRNG():
                with BuildContext(data, is_final=is_final):
                    args, kwargs = data.draw(self.search_strategy)
                    if expected_failure is not None:
                        text_repr[0] = arg_string(test, args, kwargs)
    
                    if print_example:
                        example = "%s(%s)" % (
                            test.__name__,
                            arg_string(test, args, kwargs),
                        )
                        try:
                            ast.parse(example)
                        except SyntaxError:
                            data.can_reproduce_example_from_repr = False
                        report("Falsifying example: %s" % (example,))
                    elif current_verbosity() >= Verbosity.verbose:
                        report(
                            lambda: "Trying example: %s(%s)"
                            % (test.__name__, arg_string(test, args, kwargs))
                        )
>                   return test(*args, **kwargs)

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py:561: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

factory = <class 'test_SD.test_servicediscovery'>, data = data(...)

    @settings
    @given(st.data())
    def run_state_machine(factory, data):
        machine = factory()
        if isinstance(machine, GenericStateMachine) and not isinstance(
            machine, RuleBasedStateMachine
        ):
            note_deprecation(
                "%s inherits from GenericStateMachine, which is deprecated.  Use a "
                "RuleBasedStateMachine, or a test function with st.data(), instead."
                % (type(machine).__name__,),
                since="2019-05-29",
            )
        else:
            check_type(RuleBasedStateMachine, machine, "state_machine_factory()")
        data.conjecture_data.hypothesis_runner = machine
    
        n_steps = settings.stateful_step_count
        should_continue = cu.many(
            data.conjecture_data, min_size=1, max_size=n_steps, average_size=n_steps
        )
    
        print_steps = (
            current_build_context().is_final or current_verbosity() >= Verbosity.debug
        )
        try:
            if print_steps:
                machine.print_start()
            machine.check_invariants()
    
>           while should_continue.more():

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <hypothesis.internal.conjecture.utils.many object at 0x0000026E3CD46FC8>

    def more(self):
        """Should I draw another element to add to the collection?"""
        if self.drawn:
            self.data.stop_example(discard=self.rejected)
    
        self.drawn = True
        self.rejected = False
    
        self.data.start_example(ONE_FROM_MANY_LABEL)
    
        if self.min_size == self.max_size:
            should_continue = self.count < self.min_size
        elif self.force_stop:
            should_continue = False
        else:
            if self.count < self.min_size:
                p_continue = 1.0
            elif self.count >= self.max_size:
                p_continue = 0.0
            else:
                p_continue = self.stopping_value
>           should_continue = biased_coin(self.data, p_continue)

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\utils.py:392: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

data = ConjectureData(OVERRUN, 16 bytes, frozen), p = 0.9090909090909091

    def biased_coin(data, p):
        """Return False with probability p (assuming a uniform generator),
        shrinking towards False."""
        data.start_example(BIASED_COIN_LABEL)
        while True:
            # The logic here is a bit complicated and special cased to make it
            # play better with the shrinker.
    
            # We imagine partitioning the real interval [0, 1] into 256 equal parts
            # and looking at each part and whether its interior is wholly <= p
            # or wholly >= p. At most one part can be neither.
    
            # We then pick a random part. If it's wholly on one side or the other
            # of p then we use that as the answer. If p is contained in the
            # interval then we start again with a new probability that is given
            # by the fraction of that interval that was <= our previous p.
    
            # We then take advantage of the fact that we have control of the
            # labelling to make this shrink better, using the following tricks:
    
            # If p is <= 0 or >= 1 the result of this coin is certain. We make sure
            # to write a byte to the data stream anyway so that these don't cause
            # difficulties when shrinking.
            if p <= 0:
                data.draw_bits(1, forced=0)
                result = False
            elif p >= 1:
                data.draw_bits(1, forced=1)
                result = True
            else:
                falsey = floor(256 * (1 - p))
                truthy = floor(256 * p)
                remainder = 256 * p - truthy
    
                if falsey + truthy == 256:
                    if isinstance(p, Fraction):
                        m = p.numerator
                        n = p.denominator
                    else:
                        m, n = p.as_integer_ratio()
                    assert n & (n - 1) == 0, n  # n is a power of 2
                    assert n > m > 0
                    truthy = m
                    falsey = n - m
                    bits = bit_length(n) - 1
                    partial = False
                else:
                    bits = 8
                    partial = True
    
>               i = data.draw_bits(bits)

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\utils.py:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ConjectureData(OVERRUN, 16 bytes, frozen), n = 8, forced = None

    def draw_bits(self, n, forced=None):
        """Return an ``n``-bit integer from the underlying source of
        bytes. If ``forced`` is set to an integer will instead
        ignore the underlying source and simulate a draw as if it had
        returned that integer."""
        self.__assert_not_frozen("draw_bits")
        if n == 0:
            return 0
        assert n > 0
        n_bytes = bits_to_bytes(n)
>       self.__check_capacity(n_bytes)

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py:936: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ConjectureData(OVERRUN, 16 bytes, frozen), n = 1

    def __check_capacity(self, n):
        if self.index + n > self.max_length:
>           self.mark_overrun()

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py:990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ConjectureData(OVERRUN, 16 bytes, frozen)

    def mark_overrun(self):
>       self.conclude_test(Status.OVERRUN)

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py:1007: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ConjectureData(OVERRUN, 16 bytes, frozen), status = Status.OVERRUN
interesting_origin = None

    def conclude_test(self, status, interesting_origin=None):
        assert (interesting_origin is None) or (status == Status.INTERESTING)
        self.__assert_not_frozen("conclude_test")
        self.interesting_origin = interesting_origin
        self.status = status
        self.freeze()
>       raise StopTest(self.testcounter)
E       hypothesis.errors.StopTest: 352

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py:998: StopTest

During handling of the above exception, another exception occurred:

self = <hypothesis.stateful.test_servicediscovery.TestCase testMethod=runTest>

    def runTest(self):
>       run_state_machine_as_test(state_machine_class)

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py:141: in run_state_machine_as_test
    run_state_machine(state_machine_factory)
c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py:89: in run_state_machine
    @given(st.data())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <hypothesis.core.StateForActualGivenExecution object at 0x0000026E3C5C85C8>
message = 'Unreliable assumption: An example which satisfied assumptions on the first run now fails it.'

    def __flaky(self, message):
        if len(self.falsifying_examples) <= 1:
>           raise Flaky(message)
E           hypothesis.errors.Flaky: Unreliable assumption: An example which satisfied assumptions on the first run now fails it.

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py:751: Flaky
--------------------------------- Hypothesis ----------------------------------
Reusing examples from database
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
1 bytes [1] -> Status.OVERRUN, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
state.teardown()
14 bytes [[1, [225, [[1, 3], 2]], [150, [3, [3, 3, 1]]], [150, [3, 1]], 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v2)
v3 = state.t_add_service(s=3)
state.teardown()
18 bytes [[1, [210, [3, 0]], [37, [1, 0]], [145, [3, 0]], [121, [0, 0]], [123, [3, [3, 2]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.t_startoffer(s=v1)
state.t_startoffer(s=v2)
v3 = state.t_add_service(s=3)
state.teardown()
31 bytes [[1, [116, [3, 0]], [203, [1, 0]], [165, [0, 0]], [101, [0, 0]], [170, [3, [3, 1]]], [46, [0, 0]], [199, [1, 1]], [238, [1, 0]], [206, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
34 bytes [[1, [117, [[1, 0, 2, 0, 3], [3, 1]]], [146, [2, 0]], [53, [0, 0]], [52, [1, 0]], [206, [1, 0]], [48, [0, 0]], [74, [1, 0]], [132, [1, 0]], [130, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
35 bytes [[1, [139, [[0, 1, 0, 1, 0, 3], 2]], [172, [1, 0]], [165, [0, 0]], [232, [2, 0]], [194, [0, 0]], [220, [0, 0]], [249, [2, 0]], [105, [0, 0]], [173, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
34 bytes [[1, [248, [[1, 1, 1, 2, 0, 3], 0]], [185, [2, 0]], [233, [2, 0]], [233, [2, 0]], [196, [1, 0]], [122, [0, 0]], [220, [2, 0]], [76, [1, 0]], [158, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
3 bytes [[1, [255, 30]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [137, [[1, 0, 3], [3, 3, 3, 1]]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
19 bytes [[1, [30, [[2, 0, 2, 0, 3], [3, 2]]], [185, [0, 0]], [129, [2, 0]], [241, [1, 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v2)
v3 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.teardown()
30 bytes [[1, [183, [3, 0]], [30, [0, 0]], [191, [0, 0]], [140, [0, 0]], [188, [0, 0]], [190, [3, [3, 2]]], [254, [0, 0]], [111, [3, 1]], [80, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v2)
v4 = state.t_add_service(s=v3)
state.t_startoffer(s=v2)
v5 = state.t_add_service(s=v1)
state.teardown()
39 bytes [[1, [226, [[2, 1, 1, 1, 0, 3], [3, 3, 3, 3, 0]]], [[255, 177], [3, 0]], [214, [2, 1]], [79, [3, 2]], [201, [1, 2]], [178, [0, 1]], [151, [3, 2]], [97, [1, 2]], [108, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [135, [[2, 1, 3], [3, 3, 0]]], [255, 255, 116]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
7 bytes [[1, [192, [3, [3, 2]]], [255, 25]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [236, [3, 1]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 5]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=1)
state.t_stopoffer(s=v2)
state.teardown()
33 bytes [[1, [178, [3, [3, 3, 3, 3, 2]]], [231, [2, 0]], [57, [3, 2]], [130, [2, 1]], [41, [0, 1]], [166, [2, 0]], [162, [3, 2]], [87, [3, 0]], [1, [2, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
v3 = state.t_add_service(s=3)
state.teardown()
25 bytes [[1, [117, [[0, 1, 2, 0, 3], 0]], [60, [0, 0]], [81, [1, 0]], [237, [3, 0]], [212, [1, 1]], [189, [3, [3, 2]]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
34 bytes [[1, [219, [[2, 2, 1, 0, 3], [3, 0]]], [188, [0, 0]], [87, [2, 0]], [38, [0, 0]], [236, [1, 0]], [219, [0, 0]], [180, [2, 0]], [118, [0, 0]], [116, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [59, [[1, 0, 0, 0, 3], [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [207, [[0, 0, 2, 0, 3], 0]], [28, [0, 0]], [85, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v3)
state.teardown()
15 bytes [[1, [123, [3, [3, 1]]], [1, [3, 0]], [28, [3, 0]], [85, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [249, [[1, 1, 1, 2, 0, 3], 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
14 bytes [[1, [201, [[0, 1, 0, 1, 0, 3], [3, 0]]], [1, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.teardown()
35 bytes [[1, [103, [[2, 2, 2, 3, 3, 2, 0, 3], [3, 3, 0]]], [35, [2, 0]], [208, [0, 0]], [182, [0, 0]], [241, [0, 0]], [147, [0, 0]], [58, [3, 2]], [81, [2, 1]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [24, [[0, 0, 0, 1, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [172, [[0, 1, 0, 0, 3], [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v2)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
30 bytes [[1, [245, [[0, 0, 0, 3, 3, 0, 3], [3, 0]]], [237, [3, 2]], [38, [2, 1]], [200, [1, 0]], [173, [2, 1]], [140, [0, 1]], [74, [1, 1]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [96, [[2, 0, 2, 1, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v3)
state.t_startoffer(s=v1)
state.teardown()
35 bytes [[1, [192, [[1, 0, 1, 1, 0, 3], [3, 0]]], [107, [2, 0]], [42, [3, 2]], [138, [3, 0]], [48, [3, 1]], [199, [1, 2]], [78, [0, 3]], [77, [0, 1]], [116, [1, 3]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [52, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
8 bytes [[1, [128, [3, [3, 3, 3, 0]]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v2)
state.t_startoffer(s=v2)
state.teardown()
32 bytes [[1, [91, [[1, 3], [3, 3, 0]]], [221, [1, 0]], [84, [0, 0]], [133, [3, 1]], [82, [2, 1]], [74, [2, 1]], [154, [3, 0]], [250, [3, 1]], [73, [1, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=2)
state.check_agree(s=v3)
v4 = state.t_add_service(s=v1)
v5 = state.t_add_service(s=v1)
state.teardown()
37 bytes [[1, [247, [[1, 1, 0, 1, 0, 3], [3, 2]]], [147, [1, 0]], [58, [1, 0]], [32, [1, 0]], [202, [3, 2]], [83, [3, 1]], [217, [0, [3, 0]]], [139, [3, 2]], [88, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [60, [[0, 2, 1, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
21 bytes [[1, [213, [[0, 0, 0, 0, 3], 0]], [43, [0, 0]], [100, [0, 0]], [108, [1, 0]], [172, [1, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.teardown()
21 bytes [[1, [230, [[0, 0, 0, 0, 3], 2]], [43, [0, 0]], [171, [3, 0]], [121, [0, 0]], [172, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [182, [[1, 0, 0, 1, 0, 3], [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v2)
v4 = state.t_add_service(s=v2)
state.t_startoffer(s=v3)
state.t_startoffer(s=v2)
state.teardown()
31 bytes [[1, [25, [3, 1]], [151, [2, 0]], [132, [1, 0]], [29, [3, 0]], [229, [3, [3, 3, 1]]], [74, [1, 1]], [28, [3, 0]], [118, [1, 1]], [53, [1, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.teardown()
15 bytes [[1, [212, [3, [3, 2]]], [1, [2, 0]], [223, [3, 0]], [146, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [217, [[1, 0, 3], 1]], 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
18 bytes [[1, [116, [[0, 0, 0, 0, 3], 0]], [47, [0, 0]], [43, [0, 0]], [249, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=2)
state.t_stopoffer(s=v2)
state.check_agree(s=v2)
v4 = state.t_add_service(s=v3)
state.teardown()
28 bytes [[1, [246, [[0, 0, 0, 1, 0, 3], 2]], [214, [2, 0]], [77, [3, 2]], [180, [3, 1]], [196, [2, 1]], [173, [0, 1]], [234, [3, 1]], 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [122, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=2)
v4 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
v5 = state.t_add_service(s=v3)
state.teardown()
34 bytes [[1, [63, [[0, 0, 0, 0, 3], 2]], [73, [0, 0]], [139, [1, 0]], [194, [3, 2]], [114, [2, 0]], [220, [3, [3, 1]]], [228, [3, 2]], [240, [1, 3]], [169, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=2)
v5 = state.t_add_service(s=v4)
state.t_startoffer(s=v1)
state.t_startoffer(s=v4)
state.teardown()
34 bytes [[1, [209, [[0, 1, 0, 0, 3], 2]], [73, [0, 0]], [138, [1, 0]], [226, [3, 0]], [114, [3, 2]], [220, [3, [3, 1]]], [228, [3, 1]], [240, [1, 4]], [137, [1, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
state.teardown()
13 bytes [[1, [221, [[0, 3], 0]], [165, [2, 0]], [215, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
v4 = state.t_add_service(s=2)
state.teardown()
21 bytes [[1, [170, [[0, 1, 0, 0, 3], 2]], [89, [2, 0]], [138, [3, 0]], [230, [3, 0]], [114, [3, 1]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
7 bytes [[1, [153, [[0, 0, 3], 2]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
15 bytes [[1, [139, [[1, 1, 2, 0, 3], 0]], [79, [0, 0]], [223, [1, 0]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
18 bytes [[1, [53, [[2, 0, 2, 1, 0, 3], [3, 0]]], [146, [0, 0]], [[255, 117], [1, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.teardown()
13 bytes [[1, [38, [[0, 2, 3], 1]], [131, [3, [3, 2]]], [255, 255, 83]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [37, [3, 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [114, [3, 1]], [255, 255, 131]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
16 bytes [[1, [179, [3, [3, 3, 3, 3, 3, 2]]], [34, [0, 0]], [211, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v3)
state.t_startoffer(s=v3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v3)
state.check_agree(s=v3)
state.t_stopoffer(s=v2)
state.teardown()
33 bytes [[1, [30, [3, [3, 3, 2]]], [161, [3, 0]], [88, [3, 0]], [80, [0, [3, 0]]], [146, [1, 0]], [46, [2, 2]], [60, [1, 0]], [78, [0, [3, 0]]], [70, [2, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=2)
v4 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
18 bytes [[1, [163, [[1, 3], 2]], [81, [3, 2]], [197, [3, 1]], [53, [3, 0]], [242, [2, 3]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.teardown()
11 bytes [[1, [179, [[1, 3], [3, 3, 2]]], [120, [1, 0]], 13]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [238, [[0, 1, 0, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [157, [[2, 2, 0, 0, 3], 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
10 bytes [[1, [154, [[0, 2, 3], 0]], [131, [2, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [115, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
9 bytes [[1, [30, [[0, 3], 0]], [165, [2, 0]], 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v2)
v3 = state.t_add_service(s=v2)
state.teardown()
29 bytes [[1, [37, [[2, 2, 3], [3, 2]]], [120, [1, 0]], [219, [2, 0]], [133, [2, 0]], [183, [3, 0]], [73, [2, 0]], [130, [1, 0]], [170, [3, 0]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [49, [[0, 0, 3], 0]], 11]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.teardown()
12 bytes [[1, [165, [[1, 1, 1, 0, 3], 1]], [116, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
12 bytes [[1, [104, [[1, 0, 1, 0, 3], 0]], [36, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
11 bytes [[1, [209, [3, 0]], [174, [1, 0]], [100, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=2)
state.teardown()
22 bytes [[1, [113, [[0, 0, 0, 2, 0, 3], 0]], [240, [1, 0]], [200, [1, 0]], [129, [1, 0]], [201, [3, 1]], 5]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
10 bytes [[1, [172, [[1, 2, 3], 0]], [131, [2, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [242, [3, 0]], [255, 2]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v2)
state.teardown()
31 bytes [[1, [27, [[0, 3], [3, 0]]], [110, [1, 0]], [97, [1, 0]], [250, [3, 0]], [37, [2, 1]], [214, [1, 0]], [144, [0, 0]], [130, [0, 1]], [63, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
11 bytes [[1, [44, [3, 0]], [174, [1, 0]], [100, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [67, [3, [3, 0]]], 5]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [85, [[2, 0, 2, 0, 3], 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
31 bytes [[1, [183, [[1, 0, 0, 1, 0, 3], 2]], [192, [2, 0]], [132, [2, 0]], [233, [1, 0]], [222, [1, 0]], [151, [2, 0]], [215, [1, 0]], [128, [0, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.t_startoffer(s=v2)
v3 = state.t_add_service(s=v2)
state.teardown()
35 bytes [[1, [158, [[0, 2, 0, 1, 0, 3], 1]], [146, [0, 0]], [48, [1, 0]], [108, [3, [3, 0]]], [203, [1, 1]], [40, [2, 1]], [223, [0, 0]], [53, [1, 0]], [156, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [186, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [192, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
14 bytes [[1, [140, [[0, 0, 0, 0, 3], [3, 0]]], [[255, 1], [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.teardown()
38 bytes [[1, [230, [[2, 0, 0, 1, 0, 3], [3, 3, 3, 0]]], [1, [0, 0]], [227, [2, 0]], [232, [2, 0]], [51, [1, 0]], [80, [2, 0]], [30, [1, 0]], [92, [1, 0]], [183, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
16 bytes [[1, [239, [3, 0]], [[255, 1], [3, [3, 0]]], [192, [2, 0]], [255, 255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [178, [[2, 0, 3], 0]], [255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
8 bytes [[1, [234, [[0, 0, 3], 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.teardown()
8 bytes [[1, [38, [3, 1]], [1, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [217, [3, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [154, [3, 1]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [169, [[1, 0, 1, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=v1)
state.teardown()
9 bytes [[1, [225, [3, [3, 2]]], [1, [3, 2]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.teardown()
31 bytes [[1, [54, [[0, 3], 0]], [140, [1, 0]], [101, [2, 0]], [218, [0, 0]], [126, [1, 0]], [70, [1, 0]], [33, [2, 0]], [195, [0, 0]], [248, [3, [3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.teardown()
33 bytes [[1, [149, [[0, 0, 1, 0, 3], 0]], [157, [1, 0]], [92, [0, 0]], [169, [1, 0]], [27, [0, 0]], [39, [1, 0]], [249, [1, 0]], [85, [0, 0]], [44, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [70, [[0, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
12 bytes [[1, [214, [[2, 0, 0, 0, 3], 0]], [92, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
v3 = state.t_add_service(s=v1)
state.t_stopoffer(s=v3)
state.t_startoffer(s=v1)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
v4 = state.t_add_service(s=v1)
state.teardown()
36 bytes [[1, [57, [[2, 0, 2, 1, 0, 3], 0]], [231, [3, 2]], [172, [0, 1]], [254, [3, 0]], [213, [2, 0]], [171, [1, 2]], [241, [1, 0]], [168, [0, [3, 2]]], [181, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v2)
state.t_startoffer(s=v2)
state.t_startoffer(s=v2)
state.teardown()
30 bytes [[1, [90, [3, 1]], [1, [1, 0]], [218, [2, 0]], [201, [1, 0]], [227, [1, 0]], [132, [3, [3, 1]]], [28, [0, 0]], [149, [1, 0]], [132, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v1)
v3 = state.t_add_service(s=3)
state.check_agree(s=v1)
v4 = state.t_add_service(s=v1)
state.t_startoffer(s=v4)
state.t_stopoffer(s=v4)
state.teardown()
27 bytes [[1, [129, [3, 1]], [35, [3, 1]], [208, [0, 1]], [192, [3, 2]], [51, [0, [3, 2]]], [222, [3, 1]], [220, [1, 0]], [194, [2, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
6 bytes [[1, [219, [3, [3, 2]]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
18 bytes [[1, [124, [[2, 0, 2, 0, 3], 0]], [114, [1, 0]], [167, [0, 0]], [238, [1, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
v3 = state.t_add_service(s=2)
state.teardown()
17 bytes [[1, [181, [3, 0]], [35, [2, 0]], [241, [3, 2]], [100, [0, 1]], [90, [3, 1]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v1)
state.teardown()
17 bytes [[1, [205, [3, 2]], [165, [3, 1]], [174, [1, 1]], [196, [2, 0]], [214, [1, 1]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.teardown()
13 bytes [[1, [[255, 85], [[0, 3], 0]], [253, [3, 1]], [152, [0, 0]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
v3 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
v4 = state.t_add_service(s=v2)
state.t_stopoffer(s=v4)
state.check_agree(s=v4)
state.check_agree(s=v2)
state.teardown()
38 bytes [[1, [203, [[1, 2, 1, 0, 3], [3, 3, 0]]], [231, [3, [3, 2]]], [89, [0, 1]], [211, [3, [3, 1]]], [112, [1, [3, 1]]], [192, [3, 2]], [163, [2, 0]], [113, [0, 0]], [217, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.teardown()
10 bytes [[1, [244, [[0, 0, 3], 2]], [1, [1, 0]], 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
35 bytes [[1, [48, [[2, 2, 1, 0, 3], 0]], [30, [1, 0]], [91, [3, 2]], [131, [2, 1]], [[255, 124], [3, [3, 2]]], [38, [1, 0]], [195, [0, 2]], [189, [0, 2]], [46, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
15 bytes [[1, [40, [3, [3, 3, 3, 3, 3, 3, 3, 1]]], [255, 255, 255, 46]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=v1)
state.teardown()
16 bytes [[1, [213, [3, 2]], [[255, 255, 255, 255, 121], [3, [3, 3, 2]]], [255, 255, 160]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
23 bytes [[1, [27, [[2, 3], [3, 3, 3, 3, 3, 1]]], [127, [2, 0]], [139, [1, 0]], [[255, 178], [3, 0]], [255, 255, 89]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v2)
v5 = state.t_add_service(s=v1)
v6 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v3)
state.teardown()
45 bytes [[1, [202, [3, [3, 3, 3, 3, 3, 3, 3, 3, 3, 0]]], [[255, 255, 241], [3, [3, 1]]], [[255, 133], [3, [3, 3, 0]]], [30, [3, [3, 3, 3, 3, 1]]], [209, [3, 0]], [145, [3, 0]], [205, [2, 4]], [145, [0, 3]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v1)
state.check_agree(s=v2)
state.t_stopoffer(s=v3)
state.t_stopoffer(s=v2)
state.teardown()
36 bytes [[1, [34, [[2, 3], [3, 3, 3, 3, 3, 2]]], [[255, 255, 255, 177], [3, 1]], [219, [0, 1]], [191, [2, 1]], [27, [3, 2]], [90, [0, [3, 1]]], [244, [2, 0]], [1, [2, 1]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 9]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [252, [3, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
17 bytes [[1, [225, [[0, 1, 0, 1, 0, 3], [3, 2]]], [1, [0, 0]], [248, [1, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v2)
v3 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.t_startoffer(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v2)
state.teardown()
33 bytes [[1, [209, [[2, 0, 2, 0, 3], 0]], [65, [1, 0]], [156, [3, 0]], [146, [0, 0]], [91, [3, 1]], [27, [0, 1]], [74, [1, 1]], [75, [0, 2]], [169, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [185, [3, 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [164, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [52, [[0, 0, 0, 3, 0, 3], 1]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [62, [[0, 0, 0, 3, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
6 bytes [[1, [62, [3, [3, 1]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
v3 = state.t_add_service(s=v2)
state.teardown()
25 bytes [[1, [74, [[2, 0, 2, 1, 0, 3], [3, 3, 0]]], [141, [3, [3, 1]]], [209, [0, 1]], [42, [0, 1]], [105, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v2)
state.teardown()
33 bytes [[1, [62, [[0, 1, 0, 0, 3], 0]], [64, [2, 0]], [163, [2, 0]], [228, [1, 0]], [28, [1, 0]], [37, [1, 0]], [99, [3, 2]], [43, [2, 1]], [172, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [73, [[1, 0, 0, 1, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.teardown()
12 bytes [[1, [217, [[0, 2, 1, 0, 3], 2]], [1, [1, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_startoffer(s=v2)
state.t_startoffer(s=v2)
v3 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
32 bytes [[1, [66, [[1, 3], 2]], [210, [2, 0]], [97, [1, 0]], [113, [3, 2]], [196, [1, 0]], [204, [1, 0]], [54, [3, 1]], [59, [0, [3, 3, 2]]], [228, [2, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.teardown()
14 bytes [[1, [253, [[1, 1, 0, 1, 0, 3], [3, 1]]], [1, [3, 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [178, [[0, 0, 2, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [231, [[1, 1, 1, 0, 3], [3, 1]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v3 = state.t_add_service(s=3)
v4 = state.t_add_service(s=2)
state.check_agree(s=v3)
v5 = state.t_add_service(s=v4)
state.check_agree(s=v4)
state.teardown()
34 bytes [[1, [123, [[0, 0, 1, 1, 0, 3], 0]], [132, [3, 0]], [122, [2, 1]], [182, [1, 1]], [62, [3, 2]], [45, [3, 1]], [28, [0, 1]], [132, [3, 1]], [144, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [228, [3, 1]], [255, 255, 110]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [162, [3, [3, 1]]], [35, [3, 0]], [255, 255, 42]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
v3 = state.t_add_service(s=3)
v4 = state.t_add_service(s=v3)
state.check_agree(s=v2)
v5 = state.t_add_service(s=v1)
state.t_startoffer(s=v3)
v6 = state.t_add_service(s=1)
state.teardown()
48 bytes [[1, [121, [3, [3, 3, 3, 3, 1]]], [[255, 255, 255, 207], [3, [3, 3, 3, 3, 1]]], [210, [1, 1]], [[255, 255, 255, 255, 255, 255, 31], [3, [3, 2]]], [235, [3, 2]], [71, [0, 2]], [145, [3, 1]], [106, [1, [6, 2]]], [66, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.teardown()
21 bytes [[1, [55, [3, [3, 3, 3, 3, 3, 3, 1]]], [[255, 160], [3, [3, 3, 3, 0]]], [255, 255, 255, 93]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=1)
v4 = state.t_add_service(s=v2)
state.check_agree(s=v2)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v2)
state.teardown()
56 bytes [[1, [250, [[0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1]]], [[255, 255, 236], [3, [3, 3, 3, 3, 3, 3, 3, 3, 2]]], [147, [3, 0]], [247, [3, 2]], [110, [0, 2]], [33, [2, 3]], [231, [0, 2]], [178, [2, 3]], [208, [1, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v3)
v4 = state.t_add_service(s=3)
state.check_agree(s=v3)
state.check_agree(s=v3)
state.t_startoffer(s=v2)
state.t_startoffer(s=v1)
state.teardown()
33 bytes [[1, [161, [[1, 3], [3, 3, 3, 1]]], [219, [3, 0]], [35, [3, 0]], [63, [1, 0]], [77, [3, 2]], [81, [0, 1]], [197, [0, 1]], [223, [1, 2]], [209, [1, 3]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
state.teardown()
22 bytes [[1, [184, [[0, 3], 1]], [53, [2, 0]], [[255, 97], [3, 0]], [177, [3, 0]], [57, [1, 0]], [185, [0, 2]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
11 bytes [[1, [175, [[0, 0, 0, 2, 0, 3], [3, 2]]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
8 bytes [[1, [223, [[1, 3], 0]], [255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [252, [[1, 3], [3, 1]]], [255, 255, 47]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [240, [3, 1]], [[255, 239], [3, [3, 3, 0]]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [119, [[0, 0, 3], [3, 3, 1]]], [32, [1, 0]], [77, [0, 0]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
17 bytes [[1, [209, [[1, 3], [3, 1]]], [[255, 253], [1, 0]], [179, [2, 0]], [83, [0, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
17 bytes [[1, [141, [[0, 3], [3, 1]]], [[255, 249], [1, 0]], [163, [3, [3, 3, 0]]], [255, 16]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
8 bytes [[1, [139, [[2, 0, 3], 2]], [255, 11]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.teardown()
12 bytes [[1, [251, [[0, 0, 0, 0, 3], 0]], [1, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
8 bytes [[1, [46, [3, [3, 3, 1]]], [255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
12 bytes [[1, [154, [[0, 0, 0, 3, 0, 3], [3, 3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
23 bytes [[1, [105, [[1, 1, 3], [3, 0]]], [1, [3, [3, 3, 3, 1]]], [72, [1, 0]], [182, [1, 1]], [60, [1, 1]], 10]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
8 bytes [[1, [131, [[2, 3], 2]], [255, 255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [232, [3, 1]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
8 bytes [[1, [221, [[2, 1, 3], 2]], [255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
28 bytes [[1, [179, [[1, 0, 3], [3, 3, 3, 3, 3, 2]]], [45, [1, 0]], [[255, 194], [0, 0]], [146, [2, 0]], [253, [2, 0]], [50, [0, 0]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [211, [3, [3, 1]]], [1, [3, [3, 3, 0]]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
v4 = state.t_add_service(s=v1)
state.t_stopoffer(s=v4)
state.t_stopoffer(s=v3)
state.t_startoffer(s=v2)
state.t_stopoffer(s=v3)
v5 = state.t_add_service(s=v2)
state.teardown()
32 bytes [[1, [123, [[1, 3], [3, 0]]], [39, [3, 1]], [77, [3, 1]], [37, [3, 0]], [54, [2, 0]], [185, [2, 1]], [49, [1, 2]], [39, [2, 1]], [159, [3, [3, 1]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [24, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
24 bytes [[1, [148, [[0, 0, 0, 0, 3], 0]], [83, [0, 0]], [214, [1, 0]], [177, [3, 2]], [88, [1, 1]], [172, [0, 1]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [95, [[0, 0, 0, 0, 3], 0]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [54, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [71, [[0, 0, 0, 2, 0, 3], 0]], 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [184, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [66, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.teardown()
14 bytes [[1, [161, [[2, 0, 3], [3, 0]]], [186, [2, 0]], [137, [1, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [250, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.check_agree(s=v1)
v3 = state.t_add_service(s=1)
state.t_startoffer(s=v2)
state.t_startoffer(s=v3)
state.teardown()
35 bytes [[1, [159, [[2, 1, 1, 0, 3], 1]], [115, [0, 0]], [230, [2, 0]], [249, [3, [3, 2]]], [60, [0, 1]], [112, [0, 1]], [122, [3, [3, 0]]], [196, [1, 1]], [247, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.teardown()
14 bytes [[1, [116, [3, [3, 1]]], [204, [3, [3, 3, 3, 3, 2]]], [255, 58]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v1)
state.teardown()
33 bytes [[1, [159, [[0, 1, 3], [3, 3, 3, 2]]], [147, [3, [3, 2]]], [201, [3, 2]], [247, [3, [3, 3, 3, 2]]], [93, [2, 2]], [188, [2, 2]], [[255, 122], [1, 3]], 11]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [104, [[0, 3], 1]], [255, 20]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
19 bytes [[1, [121, [[1, 2, 2, 1, 0, 3], 1]], [216, [1, 0]], [166, [0, 0]], [49, [1, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [61, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
Traceback (most recent call last):
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 598, in evaluate_test_data
    result = self.execute(data)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 563, in execute
    result = self.test_runner(data, run)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\executors.py", line 56, in default_new_style_executor
    return function(data)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 561, in run
    return test(*args, **kwargs)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py", line 122, in run_state_machine
    machine.execute_step(value)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py", line 800, in execute_step
    result = rule.function(self, **data)
  File "D:\shared\visabo\test_SD.py", line 74, in check_agree
    assert self.service_dict[s].service_available == canoeapp.MyTest_returnvalue1()
AssertionError: assert True == False
 +  where True = <statemodel.service object at 0x0000026E3C997808>.service_available
 +  and   False = <bound method CanoeSync.MyTest_returnvalue1 of <canoe.CanoeSync object at 0x0000026E3C57E3C8>>()
 +    where <bound method CanoeSync.MyTest_returnvalue1 of <canoe.CanoeSync object at 0x0000026E3C57E3C8>> = <canoe.CanoeSync object at 0x0000026E3C57E3C8>.MyTest_returnvalue1

16 bytes [[1, [249, [[2, 0, 0, 0, 3], [3, 0]]], [[255, 1], [1, 0]], [134, [0, 0]]]] -> Status.INTERESTING ((<class 'AssertionError'>, 'D:\\shared\\visabo\\test_SD.py', 74)), 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v2)
state.t_stopoffer(s=v1)
state.teardown()
23 bytes [[1, [209, [3, [3, 3, 1]]], [227, [1, 0]], [251, [0, 0]], [210, [3, [3, 1]]], [141, [0, 0]], [199, [2, 1]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [251, [[2, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [195, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [198, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=2)
state.teardown()
32 bytes [[1, [248, [[0, 3], 0]], [63, [0, 0]], [42, [2, 0]], [175, [3, [3, 0]]], [234, [2, 1]], [98, [2, 0]], [118, [1, 1]], [38, [2, 1]], [151, [3, [3, 1]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
state.teardown()
9 bytes [[1, [221, [3, [3, 0]]], [63, [3, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
26 bytes [[1, [205, [[1, 1, 0, 1, 0, 3], 2]], [138, [3, [3, 1]]], [107, [2, 1]], [251, [2, 0]], [31, [0, 1]], [118, [2, 0]], 19]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [203, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 14]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [134, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [190, [[1, 0, 2, 0, 3], 2]], 5]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
18 bytes [[1, [179, [[0, 3], 0]], [157, [3, 1]], [144, [0, 1]], [237, [0, 1]], [228, [2, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.teardown()
25 bytes [[1, [228, [[1, 0, 3], 2]], [74, [2, 0]], [193, [0, 0]], [219, [3, 0]], [248, [1, 1]], [205, [2, 1]], [236, [3, 0]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 22]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [158, [3, [3, 2]]], [136, [1, 0]], [33, [0, 0]], [48, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v2)
state.t_stopoffer(s=v3)
state.teardown()
20 bytes [[1, [192, [[0, 1, 3], 1]], [196, [3, 1]], [154, [3, [3, 1]]], [157, [1, 1]], [201, [2, 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
state.check_agree(s=v2)
state.check_agree(s=v3)
v4 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.t_startoffer(s=v3)
state.teardown()
32 bytes [[1, [65, [[1, 1, 3], 2]], [120, [2, 0]], [52, [3, 2]], [42, [3, [3, 2]]], [224, [0, 1]], [98, [0, 0]], [73, [3, 0]], [213, [0, 2]], [200, [1, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 19]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.teardown()
25 bytes [[1, [242, [[1, 0, 3], 2]], [74, [2, 0]], [193, [0, 0]], [219, [3, 0]], [248, [1, 1]], [205, [2, 1]], [232, [3, 0]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.check_agree(s=v2)
state.teardown()
21 bytes [[1, [240, [[2, 3], 2]], [238, [1, 0]], [79, [3, 2]], [169, [2, 0]], [50, [2, 0]], [197, [0, 0]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v2)
state.teardown()
33 bytes [[1, [94, [[2, 0, 1, 0, 3], 2]], [55, [1, 0]], [120, [0, 0]], [111, [1, 0]], [214, [0, 0]], [114, [1, 0]], [143, [3, 2]], [140, [2, 0]], [101, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.teardown()
21 bytes [[1, [70, [[1, 3], 2]], [174, [1, 0]], [79, [3, 2]], [169, [2, 0]], [50, [2, 0]], [197, [2, 0]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v1)
state.t_stopoffer(s=v4)
state.t_startoffer(s=v4)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.teardown()
32 bytes [[1, [1, [[0, 0, 3], 1]], [196, [3, 1]], [154, [3, [3, 1]]], [159, [3, 1]], [201, [2, 0]], [136, [1, 0]], [253, [0, 2]], [164, [0, 2]], [99, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [151, [[1, 3], [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v2)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v2)
state.t_startoffer(s=v1)
state.teardown()
33 bytes [[1, [152, [[0, 0, 1, 0, 3], 1]], [73, [0, 0]], [26, [1, 0]], [38, [3, 2]], [149, [0, 0]], [122, [2, 0]], [219, [0, 1]], [253, [0, 0]], [36, [1, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v2)
v3 = state.t_add_service(s=1)
state.teardown()
21 bytes [[1, [228, [[2, 3], 2]], [174, [1, 0]], [207, [3, 2]], [169, [2, 0]], [178, [0, 0]], [196, [3, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
state.teardown()
8 bytes [[1, [231, [3, 2]], [1, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
15 bytes [[1, [41, [[1, 1, 0, 0, 3], 1]], [1, [0, 0]], [26, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v1)
state.check_agree(s=v3)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.teardown()
32 bytes [[1, [35, [[2, 2, 3], 0]], [30, [3, 2]], [99, [0, 1]], [238, [2, 1]], [99, [3, 2]], [166, [0, 2]], [103, [0, [3, 0]]], [97, [2, 1]], [104, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
13 bytes [[1, [104, [[1, 3], [3, 2]]], [119, [0, 0]], [1, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 13]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v3)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v2)
state.t_startoffer(s=v3)
v4 = state.t_add_service(s=1)
state.teardown()
36 bytes [[1, [144, [[0, 3], [3, 3, 1]]], [71, [0, 0]], [115, [3, 1]], [211, [3, [3, 1]]], [103, [1, 0]], [75, [2, [3, 2]]], [30, [2, [3, 1]]], [109, [1, 0]], [95, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [181, [[0, 1, 2, 0, 3], 0]], [123, [0, 0]], [41, [0, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
6 bytes [[1, [213, [[0, 3], 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=v2)
v4 = state.t_add_service(s=v2)
state.teardown()
31 bytes [[1, [249, [3, [3, 3, 1]]], [1, [0, 0]], [64, [0, 0]], [119, [2, 0]], [46, [2, 0]], [78, [1, 0]], [141, [3, 2]], [253, [3, 2]], [47, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [175, [[1, 1, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
31 bytes [[1, [186, [[2, 3], 0]], [186, [1, 0]], [63, [2, 0]], [228, [2, 0]], [[255, 236], [1, 0]], [157, [1, 0]], [245, [1, 0]], [39, [0, 0]], [99, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
7 bytes [[1, [155, [[1, 1, 3], 1]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [64, [3, [3, 3, 3, 0]]], [255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v1)
state.teardown()
19 bytes [[1, [75, [3, [3, 3, 3, 3, 2]]], [105, [3, 1]], [27, [3, 1]], [27, [1, 2]], [255, 25]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=1)
state.teardown()
24 bytes [[1, [173, [3, [3, 3, 3, 1]]], [[255, 173], [3, [3, 3, 3, 3, 3, 3, 2]]], [[255, 209], [3, [3, 3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.teardown()
14 bytes [[1, [174, [3, [3, 3, 3, 0]]], [[255, 255, 255, 1], [2, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v2)
state.t_stopoffer(s=v1)
state.teardown()
29 bytes [[1, [183, [[1, 1, 1, 1, 0, 3], [3, 0]]], [135, [1, 0]], [236, [2, 0]], [83, [0, 0]], [241, [3, 2]], [64, [0, 0]], [76, [2, 1]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.t_startoffer(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.teardown()
31 bytes [[1, [121, [[1, 3], [3, 1]]], [1, [3, 2]], [121, [1, 0]], [57, [0, 0]], [247, [0, 0]], [143, [1, 1]], [154, [1, 1]], [139, [2, 1]], [129, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v2)
state.teardown()
12 bytes [[1, [186, [3, 1]], [186, [3, [3, 2]]], [48, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v2)
state.teardown()
18 bytes [[1, [145, [[1, 1, 1, 0, 3], 2]], [131, [2, 0]], [118, [3, 0]], [83, [3, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
10 bytes [[1, [44, [[1, 0, 0, 1, 0, 3], 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [127, [[2, 0, 3], 0]], [255, 255, 255, 58]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [88, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [57, [3, [3, 3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [151, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v3)
state.t_startoffer(s=v3)
v4 = state.t_add_service(s=2)
v5 = state.t_add_service(s=v4)
state.t_startoffer(s=v4)
state.check_agree(s=v4)
state.teardown()
39 bytes [[1, [27, [[1, 0, 2, 0, 3], [3, 0]]], [139, [3, 0]], [63, [3, 0]], [201, [1, 0]], [31, [1, 0]], [101, [3, 1]], [114, [3, [3, 1]]], [93, [1, [5, 1]]], [81, [0, [5, 7, 5, 1]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.teardown()
12 bytes [[1, [63, [[1, 3], [3, 3, 0]]], [[255, 239], [3, 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=v1)
state.check_agree(s=v4)
v5 = state.t_add_service(s=3)
state.teardown()
26 bytes [[1, [106, [[1, 0, 2, 0, 3], [3, 0]]], [139, [3, 0]], [47, [3, 0]], [201, [3, 0]], [29, [0, 0]], [101, [3, [3, 2]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
21 bytes [[1, [56, [[0, 1, 2, 0, 3], 0]], [123, [0, 0]], [41, [0, 0]], [117, [2, 0]], [155, [2, 0]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [53, [3, [3, 1]]], [1, [0, 0]], [67, [1, 0]], [65, [0, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [33, [3, 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v2)
state.teardown()
19 bytes [[1, [156, [[0, 2, 0, 0, 3], 1]], [80, [3, 0]], [91, [3, [3, 1]]], [89, [1, 1]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [213, [[0, 2, 0, 0, 3], 0]], 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.teardown()
13 bytes [[1, [65, [[2, 0, 3], 0]], [55, [0, 0]], [1, [3, 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
6 bytes [[1, [24, [[0, 3], 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [176, [[1, 3], 0]], [[255, 106], [3, 1]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
6 bytes [[1, [81, [[0, 3], 2]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.t_startoffer(s=v2)
state.teardown()
18 bytes [[1, [24, [3, [3, 0]]], [[255, 148], [3, [3, 3, 1]]], [51, [1, 0]], [29, [1, 0]], 23]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=1)
v3 = state.t_add_service(s=v1)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
state.t_stopoffer(s=v3)
v4 = state.t_add_service(s=v2)
state.check_agree(s=v2)
state.teardown()
31 bytes [[1, [169, [[0, 3], [3, 1]]], [36, [1, 0]], [213, [3, 0]], [207, [3, 1]], [111, [1, 0]], [247, [0, 2]], [134, [2, 0]], [241, [3, 0]], [253, [0, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
6 bytes [[1, [142, [[1, 3], 1]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
11 bytes [[1, [49, [3, 2]], [198, [0, 0]], [220, [2, 0]], 12]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
10 bytes [[1, [57, [[0, 1, 1, 1, 0, 3], 1]], 14]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
9 bytes [[1, [214, [[0, 1, 2, 0, 3], 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
12 bytes [[1, [193, [[0, 1, 2, 0, 3], [3, 3, 3, 1]]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [129, [[0, 0, 1, 1, 0, 3], 0]], 19]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.teardown()
8 bytes [[1, [165, [3, 1]], [120, [1, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=1)
state.t_stopoffer(s=v2)
state.t_stopoffer(s=v2)
state.teardown()
36 bytes [[1, [90, [[2, 2, 2, 2, 0, 3], [3, 1]]], [61, [2, 0]], [195, [0, 0]], [249, [3, 2]], [235, [2, 1]], [69, [2, 1]], [164, [3, 0]], [97, [2, [3, 1]]], [241, [2, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v1)
state.check_agree(s=v1)
state.teardown()
19 bytes [[1, [254, [[1, 1, 3], 1]], [171, [3, 1]], [69, [2, 1]], [228, [3, 1]], [115, [0, 2]], 15]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
10 bytes [[1, [51, [[1, 1, 0, 1, 0, 3], 2]], 9]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
29 bytes [[1, [78, [3, 0]], [134, [2, 0]], [66, [1, 0]], [48, [0, 0]], [112, [0, 0]], [1, [3, 0]], [100, [2, 1]], [179, [2, 1]], [40, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [112, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
5 bytes [[1, [219, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [104, [[0, 2, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [90, [[2, 1, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [224, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
state.t_startoffer(s=v2)
state.t_startoffer(s=v3)
state.t_startoffer(s=v3)
v4 = state.t_add_service(s=3)
state.teardown()
31 bytes [[1, [32, [3, 0]], [[255, 228], [2, 0]], [70, [2, 0]], [240, [3, 1]], [167, [3, 1]], [66, [1, 1]], [30, [1, 0]], [119, [1, [3, 0]]], [176, [3, 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 15]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=1)
v4 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
v5 = state.t_add_service(s=v3)
state.check_agree(s=v3)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
state.teardown()
38 bytes [[1, [89, [[1, 1, 1, 1, 0, 3], 1]], [141, [3, 2]], [145, [3, [3, 0]]], [96, [3, 1]], [196, [1, 3]], [105, [3, [3, 3, 0]]], [107, [0, 2]], [250, [1, [7, 2]]], [44, [0, 4]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
11 bytes [[1, [142, [[2, 0, 3], 0]], [[255, 128], [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.t_startoffer(s=v2)
state.teardown()
37 bytes [[1, [188, [[1, 1, 1, 1, 0, 3], 0]], [1, [0, 0]], [215, [3, 1]], [242, [3, [3, 1]]], [157, [0, 2]], [123, [1, [3, 3, 2]]], [236, [2, 1]], [32, [0, 2]], [207, [1, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [133, [[1, 2, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_stopoffer(s=v2)
state.teardown()
23 bytes [[1, [132, [[1, 1, 0, 1, 0, 3], [3, 1]]], [30, [0, 0]], [83, [1, 0]], [239, [3, 2]], [208, [2, 0]], 17]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [25, [[1, 0, 1, 0, 3], 2]], 15]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [55, [[2, 0, 1, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.teardown()
16 bytes [[1, [128, [[0, 3], [3, 1]]], [1, [3, [3, 3, 3, 3, 3, 3, 1]]], 16]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [252, [3, [3, 3, 0]]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v2)
state.teardown()
29 bytes [[1, [75, [[1, 1, 3], 2]], [126, [2, 0]], [[255, 218], [0, 0]], [162, [0, 0]], [83, [0, 0]], [177, [3, 0]], [178, [1, 1]], [154, [0, 0]], 18]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [85, [3, 1]], 7]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.teardown()
8 bytes [[1, [238, [3, 2]], [64, [2, 0]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v2)
state.teardown()
18 bytes [[1, [128, [[2, 0, 1, 0, 3], 0]], [129, [1, 0]], [167, [3, 1]], [152, [0, 0]], 9]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.teardown()
9 bytes [[1, [247, [3, [3, 1]]], [1, [1, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.teardown()
29 bytes [[1, [189, [[1, 2, 1, 1, 0, 3], 0]], [181, [2, 0]], [224, [1, 0]], [195, [0, 0]], [90, [1, 0]], [42, [2, 0]], [174, [3, [3, 0]]], 8]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=v2)
state.check_agree(s=v3)
state.t_startoffer(s=v3)
state.teardown()
34 bytes [[1, [247, [[0, 0, 0, 0, 3], 0]], [1, [3, 1]], [202, [1, 0]], [215, [0, 0]], [206, [0, 0]], [63, [2, 0]], [162, [3, 1]], [211, [0, 0]], [95, [1, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
28 bytes [[1, [62, [[0, 1, 3], 1]], [1, [0, 0]], [1, [0, 0]], [1, [1, 0]], [1, [1, 0]], [1, [1, 0]], [1, [0, 0]], [62, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [48, [[0, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=2)
state.teardown()
23 bytes [[1, [88, [[0, 0, 0, 3, 3, 0, 3], 0]], [124, [1, 0]], [42, [1, 0]], [115, [2, 0]], [202, [3, 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [66, [[0, 0, 3], [3, 3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.teardown()
19 bytes [[1, [154, [[0, 0, 1, 1, 0, 3], [3, 0]]], [[255, 1], [3, [3, 1]]], [255, 255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
19 bytes [[1, [103, [[0, 0, 3], 0]], [96, [1, 0]], [26, [0, 0]], [50, [0, 0]], [135, [0, 0]], 21]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [236, [[2, 0, 2, 0, 3], 0]], [223, [1, 0]], [93, [0, 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
33 bytes [[1, [51, [[0, 0, 2, 0, 3], 2]], [144, [2, 0]], [139, [2, 0]], [190, [0, 0]], [80, [2, 0]], [121, [0, 0]], [226, [0, 0]], [63, [1, 0]], [26, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [166, [[0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.teardown()
12 bytes [[1, [244, [[1, 0, 0, 0, 3], 2]], [189, [0, 0]], 7]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.check_agree(s=v1)
v3 = state.t_add_service(s=v1)
state.teardown()
30 bytes [[1, [24, [3, 1]], [98, [2, 0]], [28, [1, 0]], [178, [0, 0]], [78, [0, 0]], [125, [3, [3, 2]]], [37, [0, 1]], [63, [0, 1]], [232, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
13 bytes [[1, [176, [[2, 0, 0, 0, 3], 0]], [1, [0, 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
11 bytes [[1, [153, [[1, 3], [3, 0]]], [255, 255, 255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=1)
state.teardown()
34 bytes [[1, [219, [[0, 1, 0, 0, 3], [3, 1]]], [42, [1, 0]], [210, [0, 0]], [133, [3, 1]], [125, [2, 1]], [151, [2, 1]], [30, [0, 1]], [44, [2, 0]], [183, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [182, [[2, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [95, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
10 bytes [[1, [104, [[2, 3], [3, 3, 0]]], [255, 255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [217, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
18 bytes [[1, [77, [3, 1]], [[255, 155], [0, 0]], [126, [0, 0]], [254, [0, 0]], [110, [0, 0]], 15]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [159, [[1, 3], 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [138, [[1, 3], 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.teardown()
8 bytes [[1, [87, [3, 0]], [1, [1, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
12 bytes [[1, [160, [[0, 0, 0, 0, 3], 0]], [68, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=3)
state.check_agree(s=v2)
state.check_agree(s=v2)
state.teardown()
33 bytes [[1, [134, [[0, 0, 1, 0, 3], 1]], [120, [0, 0]], [50, [1, 0]], [47, [1, 0]], [126, [1, 0]], [133, [0, 0]], [68, [3, 2]], [162, [0, 0]], [52, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.teardown()
19 bytes [[1, [248, [[2, 2, 0, 1, 0, 3], 0]], [205, [0, 0]], [203, [3, 0]], [173, [2, 1]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.teardown()
16 bytes [[1, [191, [[1, 0, 0, 0, 3], [3, 1]]], [89, [1, 0]], [167, [3, 1]], 4]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.t_startoffer(s=v3)
state.check_agree(s=v3)
state.teardown()
37 bytes [[1, [142, [[1, 2, 2, 1, 0, 3], 1]], [115, [1, 0]], [240, [0, 0]], [227, [2, 0]], [232, [3, 1]], [229, [3, 0]], [148, [0, [3, 3, 3, 1]]], [143, [1, 0]], [94, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
9 bytes [[1, [154, [[0, 3], 0]], [1, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
18 bytes [[1, [112, [[2, 0, 0, 1, 0, 3], [3, 3, 2]]], [180, [0, 0]], [29, [1, 0]], 20]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.teardown()
15 bytes [[1, [124, [[1, 0, 0, 0, 3], [3, 3, 3, 2]]], [180, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
12 bytes [[1, [204, [[0, 0, 0, 3, 3, 0, 3], [3, 0]]], 7]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
v3 = state.t_add_service(s=v1)
state.teardown()
26 bytes [[1, [214, [[2, 1, 0, 0, 3], 0]], [1, [0, 0]], [[255, 234], [2, 0]], [249, [3, 2]], [106, [1, 1]], [189, [3, [3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
13 bytes [[1, [52, [[1, 0, 0, 1, 0, 3], [3, 1]]], [255, 255, 189]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [111, [[2, 1, 3], 0]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 11]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=2)
state.t_startoffer(s=v2)
state.check_agree(s=v2)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=v2)
state.teardown()
35 bytes [[1, [59, [[2, 2, 0, 1, 0, 3], 2]], [202, [1, 0]], [152, [2, 0]], [217, [3, 1]], [157, [1, 0]], [228, [0, 0]], [96, [0, 1]], [185, [2, 1]], [125, [3, [3, 1]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
10 bytes [[1, [181, [[1, 1, 2, 1, 0, 3], 2]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v2)
v3 = state.t_add_service(s=v1)
state.teardown()
35 bytes [[1, [194, [[2, 2, 2, 2, 0, 3], 0]], [187, [1, 0]], [177, [2, 0]], [218, [2, 0]], [49, [3, 0]], [24, [0, 1]], [244, [2, 0]], [36, [0, 0]], [154, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v2)
state.teardown()
19 bytes [[1, [1, [[1, 1, 0, 0, 3], 1]], [46, [3, [3, 0]]], [136, [1, 1]], [126, [1, 0]], 13]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=v1)
v4 = state.t_add_service(s=3)
state.teardown()
17 bytes [[1, [113, [3, 1]], [131, [1, 0]], [131, [3, 1]], [131, [3, 1]], [131, [3, 2]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=1)
state.teardown()
34 bytes [[1, [170, [[1, 0, 2, 0, 3], [3, 2]]], [194, [0, 0]], [96, [1, 0]], [46, [1, 0]], [254, [1, 0]], [232, [1, 0]], [203, [2, 0]], [35, [2, 0]], [101, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.t_stopoffer(s=v2)
v3 = state.t_add_service(s=v2)
state.teardown()
34 bytes [[1, [205, [[0, 1, 0, 0, 3], [3, 1]]], [35, [1, 0]], [210, [0, 0]], [133, [3, 0]], [125, [2, 1]], [151, [2, 1]], [30, [0, 0]], [44, [2, 0]], [31, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.t_startoffer(s=v1)
state.teardown()
25 bytes [[1, [196, [[2, 1, 3], 0]], [1, [2, 0]], [246, [0, 0]], [97, [3, 1]], [136, [2, 1]], [30, [0, 0]], [123, [1, 1]], 6]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=v1)
v3 = state.t_add_service(s=3)
state.t_startoffer(s=v3)
state.check_agree(s=v1)
v4 = state.t_add_service(s=1)
state.check_agree(s=v2)
state.check_agree(s=v3)
state.teardown()
37 bytes [[1, [245, [[1, 0, 0, 0, 3], [3, 1]]], [88, [1, 0]], [167, [3, 1]], [1, [3, 2]], [32, [1, 0]], [37, [0, [3, 3, 3, 2]]], [246, [3, 0]], [147, [0, 2]], [77, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
state.check_agree(s=v2)
state.check_agree(s=v1)
state.teardown()
25 bytes [[1, [215, [[2, 1, 3], 0]], [1, [2, 0]], [246, [0, 0]], [97, [3, 1]], [136, [2, 1]], [30, [0, 0]], [31, [0, 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
5 bytes [[1, [144, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
v2 = state.t_add_service(s=2)
state.t_stopoffer(s=v1)
v3 = state.t_add_service(s=1)
state.t_stopoffer(s=v3)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
34 bytes [[1, [42, [[2, 2, 0, 1, 0, 3], 2]], [96, [2, 0]], [70, [1, 0]], [64, [3, 1]], [46, [2, 1]], [216, [3, 0]], [165, [2, 0]], [90, [1, 2]], [236, [2, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
v2 = state.t_add_service(s=v1)
state.t_startoffer(s=v1)
state.teardown()
11 bytes [[1, [223, [3, 1]], [197, [3, 1]], [197, [1, 1]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [174, [[2, 0, 0, 0, 3], 2]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
v2 = state.t_add_service(s=2)
state.check_agree(s=v1)
state.teardown()
11 bytes [[1, [1, [3, 0]], [1, [3, 1]], [1, [0, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.teardown()
17 bytes [[1, [195, [[0, 3], [3, 3, 3, 2]]], [205, [0, 0]], [[255, 200], [1, 0]], [255, 3]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [82, [3, [3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=3)
state.teardown()
9 bytes [[1, [77, [[1, 0, 3], [3, 3, 2]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
11 bytes [[1, [74, [[0, 1, 3], [3, 3, 3, 1]]], [255, 14]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
7 bytes [[1, [157, [3, [3, 3, 0]]], 3]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v1)
v2 = state.t_add_service(s=3)
v3 = state.t_add_service(s=2)
state.teardown()
30 bytes [[1, [67, [[2, 3], 0]], [246, [1, 0]], [172, [0, 0]], [148, [0, 0]], [75, [1, 0]], [223, [1, 0]], [215, [2, 0]], [168, [3, 2]], [158, [3, 1]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [64, [[1, 0, 1, 0, 3], 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [243, [[1, 0, 0, 0, 3], 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [170, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
20 bytes [[1, [176, [3, 0]], [32, [0, 0]], [45, [2, 0]], [55, [0, 0]], [40, [1, 0]], [141, [0, 0]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
state.teardown()
2 bytes [[1, 7]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.check_agree(s=v1)
v2 = state.t_add_service(s=v1)
state.t_stopoffer(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.t_stopoffer(s=v2)
state.check_agree(s=v1)
state.t_stopoffer(s=v2)
state.teardown()
35 bytes [[1, [134, [[2, 2, 1, 1, 0, 3], [3, 1]]], [103, [0, 0]], [237, [3, 1]], [39, [2, 1]], [234, [2, 1]], [230, [1, 1]], [118, [2, 0]], [177, [0, 1]], [59, [2, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.teardown()
9 bytes [[1, [191, [3, 0]], [[255, 1], [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=2)
state.teardown()
6 bytes [[1, [72, [[0, 3], 1]], 2]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
12 bytes [[1, [138, [[0, 0, 0, 1, 0, 3], 0]], [255, 255, 134]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.check_agree(s=v1)
state.t_startoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.t_stopoffer(s=v1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.check_agree(s=v1)
state.teardown()
29 bytes [[1, [206, [3, 0]], [94, [0, 0]], [209, [1, 0]], [77, [1, 0]], [180, [0, 0]], [170, [2, 0]], [239, [1, 0]], [71, [0, 0]], [40, [0, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [254, [3, 0]], [255, 0]]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
5 bytes [[1, [118, [3, 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
9 bytes [[1, [104, [[1, 0, 0, 0, 3], 0]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.teardown()
6 bytes [[1, [127, [3, [3, 0]]], 0]] -> Status.VALID, 
Trying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
16 bytes [[1, [249, [[2, 0, 0, 0, 3], [3, 0]]], [[255, 1], [1, 0]], [134, [0, 0]]]] -> Status.OVERRUN, 
16 bytes [[1, [249, [[2, 0, 0, 0, 3], [3, 0]]], [[255, 1], [1, 0]], [134, [0, 0]]]] -> Status.INTERESTING ((<class 'AssertionError'>, 'D:\\shared\\visabo\\test_SD.py', 74)), 
Run complete after 351 examples (348 valid) and 0 shrinks
Falsifying example: run_state_machine(factory=test_servicediscovery, data=data(...))
state = test_servicediscovery()
state.init_ECU()
v1 = state.t_add_service(s=1)
state.t_startoffer(s=v1)
state.check_agree(s=v1)
state.teardown()
Traceback (most recent call last):
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 696, in run
    info.__expected_traceback,
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 563, in execute
    result = self.test_runner(data, run)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\executors.py", line 56, in default_new_style_executor
    return function(data)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\core.py", line 561, in run
    return test(*args, **kwargs)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\stateful.py", line 118, in run_state_machine
    while should_continue.more():
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\utils.py", line 392, in more
    should_continue = biased_coin(self.data, p_continue)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\utils.py", line 219, in biased_coin
    i = data.draw_bits(bits)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py", line 936, in draw_bits
    self.__check_capacity(n_bytes)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py", line 990, in __check_capacity
    self.mark_overrun()
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py", line 1007, in mark_overrun
    self.conclude_test(Status.OVERRUN)
  File "c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\hypothesis\internal\conjecture\data.py", line 998, in conclude_test
    raise StopTest(self.testcounter)
hypothesis.errors.StopTest: 352
============================== warnings summary ===============================
test_SD.py:89
  D:\shared\visabo\test_SD.py:89: DeprecationWarning: invalid escape sequence \s
    canoeapp.Load('CANoe\stcvector00001\stcvector00001.cfg') #loads the CANoe configuration

c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\win32\lib\pywintypes.py:2
  c:\users\vispesshared1_3_2\appdata\local\programs\python\python37\lib\site-packages\win32\lib\pywintypes.py:2: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp, sys, os

-- Docs: https://docs.pytest.org/en/latest/warnings.html
============================ Hypothesis Statistics ============================
test_SD.py::Test1::runTest:

  - 348 passing examples, 1 failing examples, 2 invalid examples
  - Typical runtimes: 3344-5437 ms
  - Fraction of time spent in data generation: ~ 0%
  - Stopped because test was flaky
  - Events:
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E352FFA88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C5C3B08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C5CA108>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C60C6C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C61BFC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C622088>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C625308>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C625A88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C638148>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C63E188>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C653488>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C66BCC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6820C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6844C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C68E188>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C693B88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C69ABC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C69E748>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6A8A48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6AA3C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6AD488>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6B7488>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6B7F08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6C5FC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6C9EC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6CAE48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6D4088>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6D4B08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6DE108>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6F9AC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C6FF348>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C701F88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C705F48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C70AC88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C71AC48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C71E788>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C71EB88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C729188>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C734588>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C739088>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C748548>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C74CF48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C756908>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C761508>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C767048>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C76E688>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7726C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C779988>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C77B948>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C77C388>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7800C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C781348>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C78C588>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C796B08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7997C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7A5F48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7A7448>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7C9348>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7CA388>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7DA5C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7E1348>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7EFAC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7F7D08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C7FE988>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C808408>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C80F348>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C82A148>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C82F608>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C835EC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C83BD08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C843EC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C847D08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C860208>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C877148>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C87D6C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C885E48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C88B988>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C894788>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8A0708>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8A0B08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8ABD88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8B0C88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8B9388>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8BA6C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8C2CC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8CC748>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8CF308>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8E5248>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8F0908>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8F8C48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C8FAAC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C900588>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C907948>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C90B348>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C90BFC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C919348>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C91B548>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C91FB08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C925548>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C9277C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C927B48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C937AC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C93C688>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C94A888>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C954588>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C966908>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C968B08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C96B408>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C97B548>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C985F08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C9890C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C989E48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C98DE48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C9C0688>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C9CD148>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C9D1648>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C9DAB88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C9EF0C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C9F2688>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3C9F37C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA00508>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA0DCC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA107C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA26D88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA29F08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA2A648>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA35D88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA36B88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA43A48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA4CF48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA4F848>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA58208>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA59848>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA5B108>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA64608>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA6E5C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA74288>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA762C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CA831C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CAA1148>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CAB5208>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CAB5388>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CAB9908>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CABAE48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CAC5E48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CADBCC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CADE088>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CAE3088>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CAE9E88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CAF2D88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CAF8EC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB08188>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB09E08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB0DD88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB16388>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB16C08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB237C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB26188>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB28E48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB33E08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB36AC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB45D08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB55C08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB58908>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB60608>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB621C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB6AD48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB7BAC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB7EB08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB85A08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB8B488>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB93808>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CB95D88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBA0A88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBA0EC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBA26C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBBA1C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBBBB08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBCBB08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBD10C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBDC188>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBDE388>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBE2748>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBED148>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBEF948>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CBF3E88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC03AC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC0DF08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC0E308>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC14148>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC17E08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC1FF48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC29F08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC33748>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC390C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC3BB08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC42188>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC42C08>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC4BD88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC5D448>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC60C88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC636C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC67548>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC69908>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC74848>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC777C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC77AC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC89588>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC8B3C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC8D4C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC8D688>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC984C8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CC9FEC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CCA7E48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CCAD288>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CCB8848>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CCC5E88>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CCD6D48>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CCE3988>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CCEA348>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CCF9088>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CCF9BC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CD02988>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CD08948>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CD19648>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CD19EC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CD3ADC8>.is_valid) to satisfy filter
    *   0.28%, Retried draw from sampled_from([Rule(targets=(), function=<function test_servicediscovery.check_agree at 0x0000026E3C577678>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_startoffer at 0x0000026E3C560C18>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=(), function=<function test_servicediscovery.t_stopoffer at 0x0000026E3C566168>, arguments={'s': <hypothesis.stateful.Bundle object at 0x0000026E3C24A348>}, precondition=None, bundles=(<hypothesis.stateful.Bundle object at 0x0000026E3C24A348>,)),
 Rule(targets=('services',), function=<function test_servicediscovery.t_add_service at 0x0000026E3C55BEE8>, arguments={'s': integers(min_value=1, max_value=3)}, precondition=None, bundles=())]).filter(<hypothesis.stateful.RuleStrategy object at 0x0000026E3CD3FA08>.is_valid) to satisfy filter

================= 1 failed, 2 warnings in 1424.35s (0:23:44) ==================
